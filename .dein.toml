###################################################
# プラグイン マネージャー
###################################################
[[plugins]]
repo = 'Shougo/dein.vim'

###################################################
# denite
###################################################
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nmap <Space> [denite]

  " フローティング
  let s:denite_win_width_percent = 0.85
  let s:denite_win_height_percent = 0.7

  let s:denite_default_options = {
      \ 'split': 'floating',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
      \ 'highlight_filter_background': 'DeniteFilter',
      \ 'prompt': '>>',
      \ 'start_filter': v:false
      \ }

  let s:denite_option_array = []

  for [key, value] in items(s:denite_default_options)
    call add(s:denite_option_array, '-'.key.'='.value)
  endfor

  call denite#custom#option('default', s:denite_default_options)

  augroup denite_filter
    autocmd FileType denite call s:denite_settings()

    function! s:denite_settings() abort
      nnoremap <silent><buffer><expr> <CR>
      \ denite#do_map('do_action')
      nnoremap <silent><buffer><expr> d
      \ denite#do_map('do_action', 'delete')
      nnoremap <silent><buffer><expr> p
      \ denite#do_map('do_action', 'preview')
      nnoremap <silent><buffer><expr> q
      \ denite#do_map('quit')
      nnoremap <silent><buffer><expr> i
      \ denite#do_map('open_filter_buffer')
      nnoremap <silent><buffer><expr> <Space>
      \ denite#do_map('toggle_select').'j'
    endfunction
  augroup END

  " agを使用する
  call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])

  " フィルタ設定
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
    \ [ '.git/', '.ropeproject/', '__pycache__/',
    \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

  " grep設定
  call denite#custom#var('grep', 'command', ['ag'])
	call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep', '--hidden'])
	call denite#custom#var('grep', 'recursive_opts', [])
	call denite#custom#var('grep', 'pattern_opt', [])
	call denite#custom#var('grep', 'separator', ['--'])
	call denite#custom#var('grep', 'final_opts', [])

  command! -nargs=? Dgrep call s:Dgrep(<f-args>)
  function s:Dgrep(...)
    if a:0 > 0
      execute(':Denite -buffer-name=grep-buffer-denite grep -path='.a:1)
    else
      execute(':Denite -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').' grep')
    endif
  endfunction

  " grep結果を再表示
  command! Dresume execute(':Denite -resume -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').'')
  " 次へ
  command! Dnext execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately '.join(s:denite_option_array, ' ').'')
  " 前へ
  command! Dprev execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately '.join(s:denite_option_array, ' ').'')

  " キーマップ
  " カレントディレクトリを表示
  nnoremap <silent> [denite]a :Denite file/rec<CR>

  " バッファを表示
  nnoremap <silent> [denite]b :Denite buffer<CR>

  " ファイル一覧を表示
  nnoremap <silent> [denite]f :Denite -buffer-name=file file<CR>

  " 最近使ったファイルの一覧
  nnoremap <silent> [denite]fr :Denite file/old<CR>

  " neoyank
  nnoremap <silent> [denite]ny :Denite neoyank<CR>

  " grep検索
  nnoremap <silent> [denite]g  :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>
  " Denite grep検索結果を再表示する
  nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>

  " カーソル位置の単語をgrep検索
  nnoremap <silent> [denite],cg :<C-u>DeniteCursorWord grep -buffer-name=search line<CR><C-R><C-W><CR>

  " プロンプトの左端に表示される文字を指定
  call denite#custom#option('default', 'prompt', '>>')

  " denite/insert モードのときは，C- で移動できるようにする
  "call denite#custom#map('insert', "<C-j>", '<denite:move_to_next_line>')
  "call denite#custom#map('insert', "<C-k>", '<denite:move_to_previous_line>')

  " C-N,C-Pで上下移動
  call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')

  " ESCキーでdeniteを終了
  call denite#custom#map('insert', '<esc>', '<denite:enter_mode:normal>', 'noremap')
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

###################################################
# vim-buffergator
###################################################
[[plugins]]
repo = 'jeetsukumaran/vim-buffergator'
hook_add = '''
  """ How To Use """
  "<Leader>b    Open buffer
  "cs           Cycle through sort regimes.
  "cd           Cycle through display regimes.
  "cp           Toggle showing full paths (only "basename" display regime)
  "cw           Cycle through window (viewport) split modes.
  "cq           Cycle through quit (autodismiss-on-select) policies.
  "r            Update (rebuild/refresh) index.
  "d            Delete the selected buffer.
  "D            Unconditionally delete the selected buffer.
  "x            Wipe the selected buffer.
  "X            Unconditionally wipe the selected buffer.
  "q            Quit the index/catalog window.
  """"""""""""""""""
  let g:buffergator_viewport_split_policy = "T"
'''

###################################################
# Git
###################################################
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  " diffを縦分割
  set diffopt+=vertical

  " ---------------------------------------
  " vim-gitgutter
  " ---------------------------------------
  highlight SignColumn ctermbg = lightgrey

  " diffを縦分割
  set diffopt+=vertical

  " 表示列の背景色変更
  let gitgutter_override_sign_column_highlight = 0
  "
  " 表示するマークのカスタマイズ
  let g:gitgutter_sign_added = '✚'
  let g:gitgutter_sign_modified = '➤'
  let g:gitgutter_sign_removed = '✘'
  let g:gitgutter_sign_modified_removed = "➜"

  " 変更箇所に着色
  let g:gitgutter_highlight_lines = 1

  autocmd Vimenter,Colorscheme * :hi GitGutterAddLine ctermfg=none ctermbg=17
  autocmd Vimenter,Colorscheme * :hi GitGutterChangeLine ctermfg=none ctermbg=53
  autocmd Vimenter,Colorscheme * :hi GitGutterDeleteLine ctermfg=none ctermbg=52
  autocmd Vimenter,Colorscheme * :hi GitGutterChangeDeleteLine ctermfg=none ctermbg=53
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'lambdalisue/gina.vim'

###################################################
# 装飾
###################################################
[[plugins]]
repo = 'itchyny/landscape.vim'
#repo = 'junegunn/seoul256.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  set list listchars=tab:\¦\

  let g:indentLine_color_term = 111
  let g:indentLine_color_gui = '#708090'
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  " タブバーのカスタマイズを有効にする
  let g:airline#extensions#tabline#enabled = 1

  " タブバーの右領域を非表示にする
  let g:airline#extensions#tabline#show_splits = 0
  let g:airline#extensions#tabline#show_tab_type = 0
  let g:airline#extensions#tabline#show_close_button = 0

  " テーマ
  let g:airline_theme='jellybeans'
  let g:airline_powerline_fonts = 1

  " ブランチ
  let g:airline#extensions#branch#enabled = 1
  let g:airline#extensions#branch#vcs_priority = ["git", "mercurial"]

  " レイアウト
  let g:airline#extensions#default#layout = [
  \ [ 'z', 'a', 'b', 'c' ],
  \ [ 'x', 'y', 'error', 'warning']
  \ ]
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'unblevable/quick-scope'
hook_add = '''
  " Trigger a highlight in the appropriate direction when pressing these keys
  let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
'''

[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
  augroup matchup_matchparen_highlight
    autocmd!
    autocmd ColorScheme * hi MatchParen ctermbg=darkcyan guibg=darkcyan
  augroup END
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1
'''

####################################################
## Nerd Tree
####################################################
#[[plugins]]
#repo = 'scrooloose/nerdtree'
#hook_add = '''
#  nmap <C-e> [nerdtree]
#
#  nmap nt <plug>NERDTreeTabsToggle<cr>
#  nmap <silent> [nerdtree] <plug>NERDTreeTabsToggle<CR>
#  vmap <silent> [nerdtree] <Esc> <plug>NERDTreeTabsToggle<CR>
#  omap <silent> [nerdtree] <plug>NERDTreeTabsToggle<CR>
#  imap <silent> [nerdtree] <Esc> :<plug>NERDTreeTabsToggle<CR>
#
#  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
#
#  let g:NERDTreeShowHidden=1
#'''
#
#[[plugins]]
#repo = 'jistr/vim-nerdtree-tabs'
#hook_add = '''
#  " ファイルが指定されていなければNERD treeを有効にする
#  if argc() == 0
#    let g:nerdtree_tabs_open_on_console_startup = 1
#  end
#'''
#
#[[plugins]]
#repo = 'Xuyuanp/nerdtree-git-plugin'
#hook_add = '''
#  let g:NERDTreeGitStatusIndicatorMapCustom = {
#  \ "Modified"  : "➤",
#  \ "Staged"    : "✚",
#  \ "Untracked" : "✭",
#  \ "Renamed"   : "➜",
#  \ "Unmerged"  : "═",
#  \ "Deleted"   : "✖",
#  \ "Dirty"     : "✗",
#  \ "Clean"     : "✔︎",
#  \ 'Ignored'   : '☒',
#  \ "Unknown"   : "?"
#  \ }
#'''

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
"  " 起動時に呼び出し
"  augroup fern_enter
"    autocmd!
"    autocmd VimEnter * ++nested Fern . -reveal=% -drawer
"  augroup END

  " Ctrl+e 呼び出し
  nnoremap <silent><C-e> :Fern . -reveal=% -drawer<CR>

  let g:fern#default_hidden=1

  let g:fern#renderer="nerdfont"

  function! FernInit() abort
    nmap <buffer><expr>
          \ <Plug>(fern-my-open-expand-collapse)
          \ fern#smart#leaf(
          \   "\<Plug>(fern-action-open:select)",
          \   "\<Plug>(fern-action-expand)",
          \   "\<Plug>(fern-action-collapse)",
          \ )
    nmap <buffer> <CR> <Plug>(fern-my-open-expand-collapse)
    nmap <buffer> o <Plug>(fern-my-open-expand-collapse)
    nmap <buffer> <2-LeftMouse> <Plug>(fern-my-open-expand-collapse)
    nmap <buffer> mf <Plug>(fern-action-new-file)
    nmap <buffer> md <Plug>(fern-action-new-dir)
    nmap <buffer> D <Plug>(fern-action-remove)
    nmap <buffer> mv <Plug>(fern-action-move)
    nmap <buffer> r <Plug>(fern-action-rename)
    nmap <buffer> s <Plug>(fern-action-open:split)
    nmap <buffer> v <Plug>(fern-action-open:vsplit)
    nmap <buffer> R <Plug>(fern-action-reload)
    nmap <buffer> <nowait> d <Plug>(fern-action-hidden:toggle)
    nmap <buffer> <nowait> < <Plug>(fern-action-leave)
    nmap <buffer> <nowait> > <Plug>(fern-action-enter)
  endfunction

  augroup FernEvents
    autocmd!
    autocmd FileType fern call FernInit()
  augroup END
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'

[[plugins]]
repo = 'https://github.com/ryanoasis/vim-devicons'

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
hook_add = '''
  augroup my-glyph-palette
    autocmd! *
    autocmd FileType fern call glyph_palette#apply()
  augroup END
'''

###################################################
# エディター系
###################################################
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_settings = {
  \  'variables': {
  \  'lang': "ja"
  \  },
  \  'indentation': '  '
  \}
'''

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  " <Leader> is \

  " 行の最初の文字の前にコメント文字をトグル
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)

  " 行頭にコメントをトグル
  nmap <Leader>, <Plug>(caw:zeropos:toggle)
  vmap <Leader>, <Plug>(caw:zeropos:toggle)
'''

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

###################################################
# gtags
###################################################
[[plugins]]
repo = 'lighttiger2505/gtags.vim'
hook_add = '''
  let g:Gtags_Auto_Map = 0
  let g:Gtags_OpenQuickfixWindow = 1

  " キーマップ
  " Show definetion of function cousor word on quickfix
  nmap <silent> <C-]> :<C-u>exe("Gtags ".expand('<cword>'))<CR>
  " Show reference of cousor word on quickfix
  nmap <silent> <C-t> :<C-u>exe("Gtags -r ".expand('<cword>'))<CR>
'''

[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
  let g:gen_tags#gtags_auto_gen = 1
'''

###################################################
# 便利ツール
###################################################
[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
  " for Ag
  autocmd VimEnter * command! -bang -nargs=* Ag
    \ call fzf#vim#ag(<q-args>, '--hidden', <bang>0)
'''

###################################################
# Coc.nvim
###################################################
[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0

build = 'yarn install --frozen-lockfile'

hook_post_source = '''
  call coc#util#install()
'''

hook_add = '''
  " 使用するextension
  let g:coc_global_extensions = [
  \  'coc-neosnippet',
  \  'coc-word',
  \  'coc-json',
  \  'coc-yaml',
  \  'coc-metals',
  \  'coc-rust-analyzer'
  \]

  " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
  " delays and poor user experience.
  set updatetime=300

  " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c

  " Always show the signcolumn, otherwise it would shift the text each time
  " diagnostics appear/become resolved.
  set signcolumn=yes

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
  " position. Coc only does snippet and additional edit on confirm.
  " <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
  if exists('*complete_info')
    inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
  else
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
  endif

  " Use `[g` and `]g` to navigate diagnostics
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code.
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Applying codeAction to the selected region.
  " Example: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap keys for applying codeAction to the current line.
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Apply AutoFix to problem on the current line.
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Map function and class text objects
  " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  " Use <TAB> for selections ranges.
  " NOTE: Requires 'textDocument/selectionRange' support from the language server.
  " coc-tsserver, coc-python are the examples of servers that support it.
  nmap <silent> <TAB> <Plug>(coc-range-select)
  xmap <silent> <TAB> <Plug>(coc-range-select)

  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocAction('format')

  " Add `:Fold` command to fold current buffer.
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " Add `:OR` command for organize imports of the current buffer.
  command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

  " Add (Neo)Vim's native statusline support.
  " NOTE: Please see `:h coc-status` for integrations with external plugins that
  " provide custom statusline: lightline.vim, vim-airline.
  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

  " Mappings using CoCList:
  " Show all diagnostics.
  nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions.
  nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
  " Show commands.
  nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document.
  nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols.
  nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list.
  nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

  " Notify coc.nvim that <enter> has been pressed.
  " Currently used for the formatOnType feature.
  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
        \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
'''

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info)
"    " If no commit message, start with insert mode
"    if a:info.vcs ==# 'git' && getline(1) ==# ''
"        startinsert
"    end

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
  endfunction
'''
