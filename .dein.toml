###################################################
# プラグイン マネージャー
###################################################
[[plugins]]
repo = 'Shougo/dein.vim'

###################################################
# ファイラ
###################################################
[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
 " 起動時に呼び出し
 augroup fern_enter
   autocmd!
   autocmd VimEnter * ++nested Fern . -reveal=% -drawer
 augroup END

 " Ctrl+e 呼び出し
 nnoremap <silent><C-e> :Fern . -reveal=% -drawer -toggle<CR>

 " レイアウト
 let g:fern#default_hidden=1
 let g:fern#renderer="nerdfont"

 function! FernInit() abort
   nmap <buffer><expr>
         \ <Plug>(fern-my-open-expand-collapse)
         \ fern#smart#leaf(
         \   "\<Plug>(fern-action-open:select)",
         \   "\<Plug>(fern-action-expand)",
         \   "\<Plug>(fern-action-collapse)",
         \ )
   nmap <buffer> <CR> <Plug>(fern-my-open-expand-collapse)
   nmap <buffer> o <Plug>(fern-my-open-expand-collapse)
   nmap <buffer> <2-LeftMouse> <Plug>(fern-my-open-expand-collapse)
   nmap <buffer> mf <Plug>(fern-action-new-file)
   nmap <buffer> md <Plug>(fern-action-new-dir)
   nmap <buffer> D <Plug>(fern-action-remove)
   nmap <buffer> mv <Plug>(fern-action-move)
   nmap <buffer> r <Plug>(fern-action-rename)
   nmap <buffer> s <Plug>(fern-action-open:split)
   nmap <buffer> v <Plug>(fern-action-open:vsplit)
   nmap <buffer> R <Plug>(fern-action-reload)
   nmap <buffer> <nowait> d <Plug>(fern-action-hidden:toggle)
   nmap <buffer> <nowait> < <Plug>(fern-action-leave)
   nmap <buffer> <nowait> > <Plug>(fern-action-enter)
 endfunction

 augroup FernEvents
   autocmd!
   autocmd FileType fern call FernInit()
 augroup END
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'

[[plugins]]
repo = 'csch0/vim-startify-renderer-nerdfont'

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
hook_add = '''
  augroup my-glyph-palette
    autocmd! *
    autocmd FileType fern call glyph_palette#apply()
    autocmd FileType nerdtree,startify call glyph_palette#apply()
  augroup END
'''

###################################################
# vim-buffergator
###################################################
[[plugins]]
repo = 'jeetsukumaran/vim-buffergator'
hook_add = '''
  """ How To Use """
  "<Leader>b    Open buffer
  "cs           Cycle through sort regimes.
  "cd           Cycle through display regimes.
  "cp           Toggle showing full paths (only "basename" display regime)
  "cw           Cycle through window (viewport) split modes.
  "cq           Cycle through quit (autodismiss-on-select) policies.
  "r            Update (rebuild/refresh) index.
  "d            Delete the selected buffer.
  "D            Unconditionally delete the selected buffer.
  "x            Wipe the selected buffer.
  "X            Unconditionally wipe the selected buffer.
  "q            Quit the index/catalog window.
  """"""""""""""""""
  let g:buffergator_viewport_split_policy = "T"
'''

###################################################
# Git
###################################################
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  " diffを縦分割
  set diffopt+=vertical

  highlight SignColumn ctermbg = lightgrey

  " diffを縦分割
  set diffopt+=vertical

  " 表示列の背景色変更
  let gitgutter_override_sign_column_highlight = 0
  "
  " 表示するマークのカスタマイズ
  let g:gitgutter_sign_added = '✚'
  let g:gitgutter_sign_modified = '➤'
  let g:gitgutter_sign_removed = '✘'
  let g:gitgutter_sign_modified_removed = "➜"

  " 変更箇所に着色
  let g:gitgutter_highlight_lines = 1

  autocmd Vimenter,Colorscheme * :hi GitGutterAddLine ctermfg=none ctermbg=17
  autocmd Vimenter,Colorscheme * :hi GitGutterChangeLine ctermfg=none ctermbg=53
  autocmd Vimenter,Colorscheme * :hi GitGutterDeleteLine ctermfg=none ctermbg=52
  autocmd Vimenter,Colorscheme * :hi GitGutterChangeDeleteLine ctermfg=none ctermbg=53
'''

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info)
    " commitia使用時はfernが不要なので閉じる
    autocmd VimEnter * ++nested Fern . -reveal=% -drawer -toggle
    autocmd WinNew * <C-w><LEFT>  " なぜかcommitiaの右ウインドウにフォーカスが移ってしまうので、左のウインドウに移動させる

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)

    " 起動時に必要に応じてdiffを確認したいので、インサートモードでの起動はOFFにしておく
"     " 起動と同時にインサートモードにする
"     if a:info.vcs ==# 'git' && getline(1) ==# ''
"       startinsert
"     end
  endfunction
'''

###################################################
# 装飾
###################################################
[[plugins]]
repo = 'itchyny/landscape.vim'
#repo = 'junegunn/seoul256.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  set list listchars=tab:\¦\

  let g:indentLine_color_term = 111
  let g:indentLine_color_gui = '#708090'
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  " タブバーのカスタマイズを有効にする
  let g:airline#extensions#tabline#enabled = 1

  " タブバーの右領域を非表示にする
  let g:airline#extensions#tabline#show_splits = 0
  let g:airline#extensions#tabline#show_tab_type = 0
  let g:airline#extensions#tabline#show_close_button = 0

  " テーマ
  let g:airline_theme='jellybeans'
  let g:airline_powerline_fonts = 1

  " ブランチ
  let g:airline#extensions#branch#enabled = 1
  let g:airline#extensions#branch#vcs_priority = ["git", "mercurial"]

  " レイアウト
  let g:airline#extensions#default#layout = [
  \ [ 'z', 'a', 'b', 'c' ],
  \ [ 'x', 'y', 'error', 'warning']
  \ ]
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'unblevable/quick-scope'
hook_add = '''
  " Trigger a highlight in the appropriate direction when pressing these keys
  let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
'''

[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
  augroup matchup_matchparen_highlight
    autocmd!
    autocmd ColorScheme * hi MatchParen ctermbg=darkcyan guibg=darkcyan
  augroup END
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1
'''

###################################################
# エディター系
###################################################
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  " <Leader> is \

  " 行の最初の文字の前にコメント文字をトグル
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)

  " 行頭にコメントをトグル
  nmap <Leader>, <Plug>(caw:zeropos:toggle)
  vmap <Leader>, <Plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

###################################################
# 便利ツール
###################################################
[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'LeafCage/yankround.vim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'yuki-yano/fzf-preview.vim'
rev = 'release/rpc'

###################################################
# 開発ツール
###################################################
# F#
[[plugins]]
repo = 'ionide/Ionide-vim'
build = 'make fsautocomplete'

###################################################
# Coc.nvim
###################################################
[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0

build = 'yarn install --frozen-lockfile'

hook_post_source = '''
  call coc#util#install()
'''

depends = ['yankround.vim']

hook_add = '''
  " 使用するextension
  " coc-fzf-preview
  "   - rg のインストールが必要
  let g:coc_global_extensions = [
  \  'coc-neosnippet',
  \  'coc-word',
  \  'coc-json',
  \  'coc-yaml',
  \  'coc-fzf-preview',
  \  'coc-yank',
  \  'coc-fsharp',
  \  'coc-metals',
  \  'coc-rust-analyzer'
  \]

  " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
  " delays and poor user experience.
  set updatetime=300

  " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c

  " Always show the signcolumn, otherwise it would shift the text each time
  " diagnostics appear/become resolved.
  set signcolumn=yes

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
  " position. Coc only does snippet and additional edit on confirm.
  " <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
  if exists('*complete_info')
    inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
  else
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
  endif

  " Use `[g` and `]g` to navigate diagnostics
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code.
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Applying codeAction to the selected region.
  " Example: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap keys for applying codeAction to the current line.
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Apply AutoFix to problem on the current line.
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Map function and class text objects
  " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  " Use <TAB> for selections ranges.
  " NOTE: Requires 'textDocument/selectionRange' support from the language server.
  " coc-tsserver, coc-python are the examples of servers that support it.
  nmap <silent> <TAB> <Plug>(coc-range-select)
  xmap <silent> <TAB> <Plug>(coc-range-select)

  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocAction('format')

  " Add `:Fold` command to fold current buffer.
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " Add `:OR` command for organize imports of the current buffer.
  command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

  " Add (Neo)Vim's native statusline support.
  " NOTE: Please see `:h coc-status` for integrations with external plugins that
  " provide custom statusline: lightline.vim, vim-airline.
  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

  " Mappings using CoCList:
  " Show all diagnostics.
  nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions.
  nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
  " Show commands.
  nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document.
  nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols.
  nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list.
  nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

  " Notify coc.nvim that <enter> has been pressed.
  " Currently used for the formatOnType feature.
  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
        \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  "---------------------------------------------------
  " coc-fzf-preview
  "---------------------------------------------------
  nmap <Space> [fzf-p]
  xmap <Space> [fzf-p]

  " Git Status
  nnoremap <silent> [fzf-p]gs    :<C-u>CocCommand fzf-preview.GitStatus<CR>
  " バッファー
  nnoremap <silent> [fzf-p]b     :<C-u>CocCommand fzf-preview.Buffers<CR>
  nnoremap <silent> [fzf-p]B     :<C-u>CocCommand fzf-preview.AllBuffers<CR>
  nnoremap <silent> [fzf-p]/     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
  nnoremap <silent> [fzf-p]*     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
  nnoremap          [fzf-p]gr    :<C-u>CocCommand fzf-preview.ProjectGrep<Space>
  xnoremap          [fzf-p]gr    "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
  nnoremap <silent> [fzf-p]l     :<C-u>CocCommand fzf-preview.LocationList<CR>

  "---------------------------------------------------
  " coc-yank
  "---------------------------------------------------
  " Show yank list by coc-yank
  nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
  " Clean yank list by coc-yank
  nnoremap <silent> <space>Y  :<C-u>CocCommand yank.clean<cr>
'''

