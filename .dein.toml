###################################################
# プラグイン マネージャー
###################################################
[[plugins]]
repo = 'Shougo/dein.vim'

###################################################
# denite
###################################################
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nmap <Space> [denite]

  " floating window を使う
  let s:denite_win_width_percent = 0.85
  let s:denite_win_height_percent = 0.7

  call denite#custom#option('default', {
    \ 'split'     : 'floating',
    \ 'winwidth'  : float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol'    : float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight' : float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow'    : float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ })

  " agを使用する
  call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

  " grep設定
  call denite#custom#var('grep', 'command', ['ag'])
	call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
	call denite#custom#var('grep', 'recursive_opts', [])
	call denite#custom#var('grep', 'pattern_opt', [])
	call denite#custom#var('grep', 'separator', ['--'])
	call denite#custom#var('grep', 'final_opts', [])

  autocmd FileType denite call s:denite_settings()

  function! s:denite_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction

  " キーマップ
  " カレントディレクトリを表示
  nnoremap <silent> [denite]a :Denite file/rec<CR>

  " バッファを表示
  nnoremap <silent> [denite]b :Denite buffer<CR>

  " ファイル一覧を表示
  nnoremap <silent> [denite]f :Denite -buffer-name=file file<CR>

  " 最近使ったファイルの一覧
  nnoremap <silent> [denite]fr :Denite file/old<CR>

  " neoyank
  nnoremap <silent> [denite]ny :Denite neoyank<CR>

  " プロンプトの左端に表示される文字を指定
  call denite#custom#option('default', 'prompt', '>')

  " deniteの起動位置をtopに変更
  call denite#custom#option('default', 'direction', 'top')

  " denite/insert モードのときは，C- で移動できるようにする
  call denite#custom#map('insert', "<C-j>", '<denite:move_to_next_line>')
  call denite#custom#map('insert', "<C-k>", '<denite:move_to_previous_line>')

  " C-N,C-Pで上下移動
  call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')

  " ESCキーでdeniteを終了
  call denite#custom#map('insert', '<esc>', '<denite:enter_mode:normal>', 'noremap')

  " grep検索
"  nnoremap <silent> [denite],g :<C-u>Denite -buffer-name=search -mode=normal grep<CR>

  " カーソル位置の単語をgrep検索
  nnoremap <silent> [denite],cg :<C-u>DeniteCursorWord grep -buffer-name=search line<CR><C-R><C-W><CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

###################################################
# Git
###################################################
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  " diffを縦分割
  set diffopt+=vertical

  " ---------------------------------------
  " vim-gitgutter
  " ---------------------------------------
  highlight SignColumn ctermbg = lightgrey

  " diffを縦分割
  set diffopt+=vertical

  " 表示列の背景色変更
  let gitgutter_override_sign_column_highlight = 0

  " 表示するマークのカスタマイズ
  let g:gitgutter_sign_added = '✚'
  let g:gitgutter_sign_modified = '➤'
  let g:gitgutter_sign_removed = '✘'
  let g:gitgutter_sign_modified_removed = "➜"

  " 変更箇所に着色
  let g:gitgutter_highlight_lines = 1

  autocmd Vimenter,Colorscheme * :hi GitGutterAddLine ctermfg=none ctermbg=17
  autocmd Vimenter,Colorscheme * :hi GitGutterChangeLine ctermfg=none ctermbg=53
  autocmd Vimenter,Colorscheme * :hi GitGutterDeleteLine ctermfg=none ctermbg=52
  autocmd Vimenter,Colorscheme * :hi GitGutterChangeDeleteLine ctermfg=none ctermbg=53
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

###################################################
# Nerd Tree
###################################################
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nmap <C-e> [nerdtree]

  nmap nt <plug>NERDTreeTabsToggle<cr>
  nmap <silent> [nerdtree] <plug>NERDTreeTabsToggle<CR>
  vmap <silent> [nerdtree] <Esc> <plug>NERDTreeTabsToggle<CR>
  omap <silent> [nerdtree] <plug>NERDTreeTabsToggle<CR>
  imap <silent> [nerdtree] <Esc> :<plug>NERDTreeTabsToggle<CR>

  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

  let g:NERDTreeShowHidden=1
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
  " ファイルが指定されていなければNERD treeを有効にする
  if argc() == 0
    let g:nerdtree_tabs_open_on_console_startup = 1
  end
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
hook_add = '''
  let g:NERDTreeIndicatorMapCustom = {
  \ "Modified"  : "➤",
  \ "Staged"    : "✚",
  \ "Untracked" : "✭",
  \ "Renamed"   : "➜",
  \ "Unmerged"  : "═",
  \ "Deleted"   : "✖",
  \ "Dirty"     : "✗",
  \ "Clean"     : "✔︎",
  \ 'Ignored'   : '☒',
  \ "Unknown"   : "?"
  \ }
'''

###################################################
# 装飾
###################################################
[[plugins]]
repo = 'itchyny/landscape.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  set list listchars=tab:\¦\

  let g:indentLine_color_term = 111
  let g:indentLine_color_gui = '#708090'
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  " タブバーのカスタマイズを有効にする
  let g:airline#extensions#tabline#enabled = 1

  " タブバーの右領域を非表示にする
  let g:airline#extensions#tabline#show_splits = 0
  let g:airline#extensions#tabline#show_tab_type = 0
  let g:airline#extensions#tabline#show_close_button = 0

  " テーマ
  let g:airline_theme='jellybeans'
  let g:airline_powerline_fonts = 1

  let g:airline#extensions#branch#enabled = 1
  let g:airline#extensions#branch#vcs_priority = ["git", "mercurial"]
  let g:airline#extensions#default#layout = [
  \ [ 'z', 'a', 'b', 'c' ],
  \ [ 'y', 'x', 'error', 'warning']
  \ ]
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

###################################################
# エディター系
###################################################
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_settings = {
  \  'variables': {
  \  'lang': "ja"
  \  },
  \  'indentation': '  '
  \}
'''

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  " <Leader> is \

  " 行の最初の文字の前にコメント文字をトグル
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)

  " 行頭にコメントをトグル
  nmap <Leader>, <Plug>(caw:zeropos:toggle)
  vmap <Leader>, <Plug>(caw:zeropos:toggle)
'''

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

###################################################
# gtags
###################################################
[[plugins]]
repo = 'lighttiger2505/gtags.vim'
hook_add = '''
  let g:Gtags_Auto_Map = 0
  let g:Gtags_OpenQuickfixWindow = 1

  " キーマップ
  " Show definetion of function cousor word on quickfix
  nmap <silent> <C-]> :<C-u>exe("Gtags ".expand('<cword>'))<CR>
  " Show reference of cousor word on quickfix
  nmap <silent> <C-t> :<C-u>exe("Gtags -r ".expand('<cword>'))<CR>
'''

[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
  let g:gen_tags#gtags_auto_gen = 1
'''

###################################################
# 便利ツール
###################################################
[[plugins]]
repo = 'thinca/vim-quickrun'

###################################################
# LSP
###################################################
[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
build = 'yarn install --frozen-lockfile'
# hook_post_source = 'coc#util#install()'
# create `~/.vim/coc-settings.json`
hook_add = '''
  command! -nargs=0 Format :call CocAction('format')

  set updatetime=300
'''

