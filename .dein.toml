###################################################
# プラグイン マネージャー
###################################################
[[plugins]]
repo = 'Shougo/dein.vim'

###################################################
# Luaモジュールの性能改善
###################################################
[[plugins]]
repo = 'lewis6991/impatient.nvim'
hook_add = '''
lua << EOF
require('impatient')
EOF
'''

###################################################
# Git
###################################################
[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
hook_add = '''
lua << EOF
  require('gitsigns').setup{
    current_line_blame = false,  -- APZelos/blamer.nvim の方が便利
  }
EOF
'''

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info)
    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)

    " 起動時に必要に応じてdiffを確認したいので、インサートモードでの起動はOFFにしておく
"     " 起動と同時にインサートモードにする
"     if a:info.vcs ==# 'git' && getline(1) ==# ''
"       startinsert
"     end
  endfunction
'''

[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
  let g:blamer_enabled = 1
  let g:blamer_delay = 500
  let g:blamer_date_format = '%Y/%m/%d'
  let g:blamer_prefix = '     [blame]  '
  let g:blamer_template = '<commit-short>, <committer>, <committer-time>, <summary>'
'''

###################################################
# 装飾
###################################################
[[plugins]]
repo = 'itchyny/landscape.vim'
hook_post_source = '''
  " landscapeのデフォルト設定を上書き
  " ただし、プラグイン用のcolorscheme設定は、各プラグインのhookで行う
  " ここでは、プラグインに依存しないcolorschemeの設定のみ行う

  " 行番号
  highlight LineNr term=none ctermfg=7 ctermbg=none guifg=#ffffff guibg=bg

  " FloatWindow用にNormalFloatグループを設定
  highlight NormalFloat ctermfg=231 ctermbg=240
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  set list listchars=tab:\¦\

  let g:indentLine_color_term = 111
  let g:indentLine_color_gui = '#708090'
'''

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
hook_add = '''
lua << EOF
  require('lualine').setup {
    options = {
      icons_enabled = true,
      theme = 'material',
      disabled_filetypes = {},
      always_divide_middle = true,
      colored = false,
    },
    sections = {
      lualine_a = {'mode'},
      lualine_b = {'branch', 'diff'},
      lualine_c = {
        {
          'filename',
          path = 1,
          file_status = true,
          shorting_target = 40,
          symbols = {
            modified = ' [+]',
            readonly = ' [RO]',
            unnamed = 'Untitled',
          }
        },
        'progress'
      },
      lualine_x = {'filetype', 'encoding'},
      lualine_y = {
        {
          'diagnostics',
          source = {'nvim-lsp'},
          sections = { 'error', 'warn', 'info', 'hint' },

          diagnostics_color = {
            error = 'DiagnosticError',
            warn  = 'DiagnosticWarn',
            info  = 'DiagnosticInfo',
            hint  = 'DiagnosticHint',
          },
          symbols = {error = 'E', warn = 'W', info = 'I', hint = 'H'},
          colored = true,
          update_in_insert = false,
          always_visible = false,
        }
      },
      lualine_z = {'location'}
    },
    inactive_sections = {
      lualine_a = {},
      lualine_b = {},
      lualine_c = {},
      lualine_x = {},
      lualine_y = {},
      lualine_z = {}
    },
    tabline = {
      lualine_a = {'buffers'},
      lualine_b = {},
      lualine_c = {},
      lualine_x = {},
      lualine_y = {},
      lualine_z = {}
    },
    extensions = {}
  }
EOF
'''

[[plugins]]
repo = 'unblevable/quick-scope'
hook_add = '''
  " Trigger a highlight in the appropriate direction when pressing these keys
  let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

  augroup qs_colors
    autocmd!
    autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
    autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
  augroup END
'''

[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
  augroup matchup_matchparen_highlight
    autocmd!
    autocmd ColorScheme * hi MatchParen ctermbg=darkcyan guibg=darkcyan
  augroup END
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1

  let g:rainbow_conf = {
  \	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
  \	'cterms': [''],
  \	'operators': '_,_',
  \	'contains_prefix': 'TOP',
  \	'parentheses_options': '',
  \	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
  \	'separately': {
  \		'*': {},
  \		'markdown': {
  \			'parentheses_options': 'containedin=markdownCode contained',
  \		},
  \		'clojure': {
  \			'ctermfgs': ['red', 'blue', 'yellow', 'magenta', 'green', 'white', 'cyan'],
  \		},
  \		'vim': {
  \			'parentheses_options': 'containedin=vimFuncBody,vimExecute',
  \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold'],
  \		},
  \		'xml': {
  \			'syn_name_prefix': 'xmlRainbow',
  \			'parentheses': ['start=/\v\<\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'))?)*\>/ end=#</\z1># fold'],
  \		},
  \		'html': {
  \			'parentheses': ['start=/\v\<((script|style|area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
  \		},
  \		'lua': {
  \			'parentheses': ["start=/(/ end=/)/", "start=/{/ end=/}/", "start=/\\v\\[\\ze($|[^[])/ end=/\\]/"],
  \		},
  \	}
  \}
'''

###################################################
# エディター系
###################################################
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
  " 保存時に末尾の空白を自動的に削除する
  let g:better_whitespace_enabled=1
  let g:strip_whitespace_on_save=1
  let g:strip_whitespace_confirm=0
'''

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  " <Leader> is \

  " 行の最初の文字の前にコメント文字をトグル
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)

  " 行頭にコメントをトグル
  nmap <Leader>, <Plug>(caw:zeropos:toggle)
  vmap <Leader>, <Plug>(caw:zeropos:toggle)
'''

###################################################
# ファイルタイプ判断
###################################################
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

###################################################
# 便利ツール
###################################################
[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
hook_source = '''
lua << EOF
require'nvim-web-devicons'.setup {
  default = true;
}
EOF
'''

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
hook_add = '''
  nmap <Space> [telescope]

  nnoremap <silent> [telescope]<Space> <cmd>lua
    \ require('telescope.builtin').find_files{
    \ }<cr>
  nnoremap <silent> [telescope]h <cmd>lua
    \ require('telescope.builtin').find_files{
    \   hidden = true,
    \ }<cr>
  nnoremap <silent> [telescope]b  <cmd>lua
    \ require('telescope.builtin').buffers{
    \  ignore_current_buffer = true,
    \  sort_lastused = true,
    \ }<cr>
  nnoremap <silent> [telescope]gr <cmd>lua
    \ require('telescope.builtin').live_grep{
    \ }<cr>
  nnoremap <silent> [telescope]gs  <cmd>lua
    \ require('telescope.builtin').git_status{
    \ }<cr>
  nnoremap <silent> [telescope]gw  <cmd>lua
    \ require('telescope.builtin').lsp_document_symbols{
    \ }<cr>
  nnoremap <silent> [telescope]in  <cmd>lua
    \ require('telescope.builtin').lsp_code_actions{
    \ }<cr>
lua << EOF

local telescope = require('telescope')

-- telescope-file-browser.nvim を使うためのおまじない
telescope.load_extension "file_browser"

telescope.setup{
  -- 設定が必要になったらここへ
  defaults = {
    sorting_strategy = 'ascending',
    layout_config = {
      prompt_position = 'top',
    },
    file_ignore_patterns = {
      '.git/',
      'target/',
      '.metals/',
      '.bloop/'
    },
  },
  extensions = {
    file_browser = {
    }
  }
}

-- ファイラの起動方法
vim.api.nvim_set_keymap("n", "<C-e>","<cmd>lua require 'telescope'.extensions.file_browser.file_browser()<CR>",{noremap = true})
EOF
'''

[[plugins]]
repo = 'nvim-telescope/telescope-file-browser.nvim'

[[plugins]]
repo = 'jeetsukumaran/vim-buffergator'
hook_add = '''

  let g:buffergator_viewport_split_policy = 'T'

  " 起動方法
  :command BB :BuffergatorOpen
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
  " 【Ctrl + o】 float windowでターミナルを表示
  nnoremap <silent><C-o> :<C-u>Deol -split=floating -winheight=30 -winwidth=100<CR>
  " 【ESC】 ターミナルモードから抜ける
  tnoremap <ESC>   <C-\><C-n>
'''

[[plugins]]
repo = 'reireias/vim-cheatsheet'
hook_add = '''
  let g:cheatsheet#cheat_file = '~/dotfiles/cheatsheet.md'

  let g:cheatsheet#float_window = 1

  let g:cheatsheet#float_window_width_ratio = 0.6
  let g:cheatsheet#float_window_height_ratio = 1.0

  " チートシートの編集
  command! EditCheat :edit ~/dotfiles/cheatsheet.md

  nnoremap <Space>? <Cmd>Cheat<CR>
  nnoremap <Space>E <Cmd>EditCheat<CR>
'''

[[plugins]]
repo = 'machakann/vim-highlightedyank'
hook_add = '''
  let g:highlightedyank_highlight_duration = 500
'''

###################################################
# LSP
###################################################
[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
hook_add = '''
lua<<EOF
------------------------------------------------
-- LSP Server Start
------------------------------------------------
function lsp_server_setup(server_name)
  local lsp_installer_servers = require'nvim-lsp-installer.servers'

  -- available_server: nvim-lsp-installerが対応しているサーバーかを示す
  -- default_config: 対応している場合は、そのサーバーのdefault configが含まれている
  local available_server, default_config = lsp_installer_servers.get_server(server_name)

  -- nvim-lsp-installerに対応していないサーバーの場合はエラーを表示して終了
  if not available_server then
    error(string.format("nvim-lsp-installer doesn't support %s server.", server_name))
    return
  end

  default_config:on_ready(function ()
    local opts = {}
    default_config:setup(opts)
  end)

  -- サーバーがインストールされていない場合はインストールする
  if not default_config:is_installed() then
    default_config:install()
  end
end

------------------------------------------------
-- LSP mapping
------------------------------------------------
function lsp_mapping()

  local function map(mode, lhs, rhs, opts)
    local options = { noremap = true }
    if opts then
      options = vim.tbl_extend("force", options, opts)
    end
    vim.api.nvim_set_keymap(mode, lhs, rhs, options)
  end

  map("n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>")
  map("n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>")
  map("n", "gr", "<cmd>lua vim.lsp.buf.references()<CR>")
  map("n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>")
  map("n", "<C-k>", "<cmd>lua vim.lsp.buf.signature_help()<CR>")
  map("n", "<space>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>")
end
EOF
'''

###################################################
# deno
###################################################
[[plugins]]
repo = 'vim-denops/denops.vim'
hook_add = '''
"  if executable("typescript-language-server")
"    " グローバルインストールされたnpmモジュールの保存場所
"    let s:npm_root = trim(system("npm root -g"))
"
"    " vim-lspのinitialization_optionsを使用して、typescript-deno-pluginのインストール場所をtypescript-language-serverへ伝えます
"    let s:has_typescript_deno_plugin = isdirectory(s:npm_root . "/typescript-deno-plugin")
"    let s:plugins = s:has_typescript_deno_plugin
"      \ ? [{ "name": "typescript-deno-plugin", "location": s:npm_root }]
"      \ : []
"    augroup LspTypeScript
"      autocmd!
"      autocmd User lsp_setup call lsp#register_server({
"      \   "name": "typescript-language-server",
"      \   "cmd": {server_info -> ["typescript-language-server", "--stdio"]},
"      \   "root_uri": {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"      \   "whitelist": ["typescript", "typescript.tsx"],
"      \   "initialization_options": { "plugins": s:plugins },
"      \ })
"    augroup END
"  endif
  if executable("deno")
    augroup LspTypeScript
      autocmd!
      autocmd User lsp_setup call lsp#register_server({
      \ "name": "deno lsp",
      \ "cmd": {server_info -> ["deno", "lsp"]},
      \ "root_uri": {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), "tsconfig.json"))},
      \ "whitelist": ["typescript", "typescript.tsx"],
      \ })
    augroup END
  endif
'''
