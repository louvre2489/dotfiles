###################################################
# LSP
###################################################
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
hook_source = '''
  " <TAB>: completion.
  inoremap <silent><expr> <TAB>
  \ pumvisible() ? '<Down>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#map#manual_complete()

  " <S-TAB>: completion back.
  inoremap <expr><S-TAB>  pumvisible() ? '<Up>' : '<C-h>'

  " バックスペース時に補完を行うための設定。マニュアルにはちらつくからOFFがデフォルトとある。気になるようならこの設定は消す。
  call ddc#custom#patch_global('backspaceCompletion', 'v:true')

  call ddc#custom#patch_global('sources', ['file', 'vsnip', 'nvim-lsp', 'deoppet', 'around'])
  call ddc#custom#patch_global('sourceOptions', {
       \ '_': {
       \   'matchers': ['matcher_head'],
       \   'sorters': ['sorter_rank'],
       \   'converters': ['converter_remove_overlap'],
       \   'minAutoCompleteLength': 1
       \ },
       \ 'around': {'mark': 'A'},
       \ 'deoppet': {'dup': v:true, 'mark': 'dp'},
       \ 'file': {
       \   'mark': 'F',
       \   'isVolatile': v:true,
       \   'forceCompletionPattern': '\S/\S*',
       \ },
       \ 'nvim-lsp': {
	     \   'mark': 'LSP',
	     \   'forceCompletionPattern': '\.\w*|:\w*|->\w*'
       \ },
       \ })

  call ddc#custom#patch_global('sourceParams', {
       \ 'around': {'maxSize': 500},
	     \ 'nvim-lsp': {'maxSize': 500},
       \ })

  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/deoppet.nvim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_source = 'ddc.vim'
on_event = 'InsertEnter'
hook_source = '''
  call deoppet#initialize()

  call deoppet#custom#option('snippets',
  \ map(globpath(&runtimepath, 'neosnippets', 1, 1),
  \     { _, val -> { 'path': val } }))

  imap <C-k>  <Plug>(deoppet_expand)
  imap <C-f>  <Plug>(deoppet_jump_forward)
  imap <C-b>  <Plug>(deoppet_jump_backward)
  smap <C-f>  <Plug>(deoppet_jump_forward)
  smap <C-b>  <Plug>(deoppet_jump_backward)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
  imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  let g:vsnip_filetypes = {}
'''

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
  call popup_preview#enable()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
  call signature_help#enable()
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['impatient.nvim', 'ddc.vim']
on_event = 'BufEnter'
#on_ft = ['rust', 'scala', 'typescript']
hook_source = '''
lua << EOF
local opts = { noremap=true, silent=true }
vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
vim.api.nvim_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
vim.api.nvim_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gy', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true

require'lspconfig'.rust_analyzer.setup{}
require'lspconfig'.metals.setup{on_attach = on_attach, capabilities = capabilities}
-- ↓↓↓使うにはtypescript-language-serverが必要
--require'lspconfig'.tsserver.setup{
--  filetypes = { "typescript" },
--  root_dir = function() return vim.loop.cwd() end
--}
EOF
'''

###################################################
# エラー一覧
###################################################
[[plugins]]
repo = 'folke/trouble.nvim'
depends = ['nvim-web-devicons']
hook_add = '''
  nnoremap <S-t><S-t> :<C-u> TroubleToggle workspace_diagnostics<CR>
  nnoremap <S-t><S-d> :<C-u> TroubleToggle document_diagnostics<CR>
  :command TC                TroubleClose
'''
hook_source = '''
lua << EOF
  require("trouble").setup {}
EOF
'''

###################################################
# シンタクスハイライト関連
###################################################
# toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# Scala
[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'
hook_add = '''
  au BufRead,BufNewFile *.sbt,*.sc set filetype=scala
'''

# Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add = '''
  let g:rustfmt_autosave = 1
'''

# JavaScript
[[plugins]]
repo = 'neovim/node-host'
build = 'npm install'
on_ft = 'javascript'

[[plugins]]
repo = 'billyvg/tigris.nvim'
depends = ['node-host']
build = './install.sh'
on_ft = 'javascript'
hook_add = '''
  let g:tigris#enabled = 1
  let g:tigris#on_the_fly_enabled = 1
  let g:tigris#delay = 300
'''

# TypeScript
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

# Dockerfile
[[plugins]]
repo = 'honza/dockerfile.vim'
on_ft = 'Dockerfile'
