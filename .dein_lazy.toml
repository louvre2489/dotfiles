###################################################
# Color Scheme
###################################################
[[plugins]]
repo = 'EdenEast/nightfox.nvim'
on_event = 'VimEnter'
depends = ['nvim-treesitter']
hook_source = '''
  " デフォルト設定を上書き
  " ただし、プラグイン用のcolorscheme設定は、各プラグインのhookで行う
  " ここでは、プラグインに依存しないcolorschemeの設定のみ行う

  " 行番号
  highlight LineNr term=none ctermfg=7 ctermbg=none guifg=#ffffff guibg=bg

  " FloatWindow用にNormalFloatグループを設定
  highlight NormalFloat ctermbg=240 guibg=#333333

  " Visual Mode
  highlight Visual ctermbg=7  guibg=#686868

  " yank 対象の色を変更するためのグループを設定
  highlight HighlightedyankRegion guifg=#2a2a2a guibg=#ffec80
  augroup highlight_yank
    autocmd!
    au TextYankPost * silent! lua vim.highlight.on_yank{ higroup="HighlightedyankRegion", timeout=700 }
  augroup END
'''
lua_source = '''
  require('nightfox').setup({
    options = {
      transparent = true,    -- Disable setting background
      styles = {              -- Style to be applied to different syntax groups
        conditionals = "NONE",
        operators = "NONE",
        variables = "NONE",
        constants = "NONE",
        comments = "bold",    -- Value is any valid attr-list value `:help attr-list`
        types = "bold",
        functions = "bold",
        keywords = "bold",
        numbers = "bold",
        strings = "bold",
      },
    },
  })

  vim.cmd("colorscheme carbonfox")
'''

###################################################
# Git
###################################################
[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = 'VimEnter'
hook_source = '''
  " ハイライトの設定
  highlight GitSignsAdd guifg=#00ff00
  highlight GitSignsAddNr guifg=#00ff00
  highlight GitSignsAddLn guifg=#00ff00
  highlight GitSignsChange guifg=#6495ed
  highlight GitSignsChangeNr guifg=#6495ed
  highlight GitSignsChangeLn guifg=#6495ed

  :command GWD :Gitsigns toggle_word_diff
'''

lua_source = '''
  require('gitsigns').setup{
    signs = {
      change = {
        hl = 'GitSignsChange',
        text = '*',
        numhl='GitSignsChangeNr',
        linehl='GitSignsChangeLn'
      },
    },
    -- ハイライト設定
    signcolumn = true,
    numhl      = true,
    word_diff  = false,
    -- APZelos/blamer.nvim の方が便利
    current_line_blame = false,
  }
'''

[[plugins]]
repo = 'rhysd/committia.vim'
on_event = 'VimEnter'
hook_source = '''
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info)
    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
  endfunction
'''

[[plugins]]
repo = 'APZelos/blamer.nvim'
on_event = 'BufEnter'
hook_source = '''
  let g:blamer_enabled = 1
  let g:blamer_delay = 500
  let g:blamer_date_format = '%Y/%m/%d'
  let g:blamer_prefix = '     [blame]  '
  let g:blamer_template = '<commit-short>, <committer>, <committer-time>, <summary>'
'''

###################################################
# 装飾
###################################################
[[plugins]]
repo = 'Yggdroot/indentLine'
on_event = 'BufEnter'
hook_source = '''
  set list listchars=tab:\¦\

  let g:indentLine_color_term = 111
  let g:indentLine_color_gui = '#708090'
'''

###################################################
# テキスト編集
###################################################
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_event = 'BufEnter'
hook_source = '''
  " 保存時に末尾の空白を自動的に削除する
  let g:better_whitespace_enabled=1
  let g:strip_whitespace_on_save=1
  let g:strip_whitespace_confirm=0
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_event = 'BufEnter'
hook_source = '''
  " <Leader> is \

  " 行の最初の文字の前にコメント文字をトグル
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)

  " 行頭にコメントをトグル
  nmap <Leader>, <Plug>(caw:zeropos:toggle)
  vmap <Leader>, <Plug>(caw:zeropos:toggle)
'''

###################################################
# ファイルタイプ判断
###################################################
[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_event = 'BufEnter'

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_event = 'BufEnter'
depends = ['context_filetype.vim']

###################################################
# LSP
###################################################
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
hook_source = '''
  " 補完選択時にプレビューウインドウを閉じる
"  autocmd CompleteDone * silent! pclose!
  " 補完選択時にプレビューウインドウが表示されないようにする
  set completeopt-=preview

  " <TAB>: completion.
  inoremap <silent><expr> <TAB>
  \ pumvisible() ? '<C-n>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#map#manual_complete()

  " <S-TAB>: completion back.
  inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'
  " C-n/C-pで補完候補を選択した時は<C-y>で選択確定しないとauto-importが実行されない
  inoremap <silent><expr> <CR> pumvisible() ? '<C-y>' : '<CR>'

  " バックスペース時に補完を行うための設定。マニュアルにはちらつくからOFFがデフォルトとある。気になるようならこの設定は消す。
  call ddc#custom#patch_global('backspaceCompletion', 'v:true')

  call ddc#custom#patch_global('sources', ['file', 'nvim-lsp', 'vsnip', 'deoppet', 'around'])
  call ddc#custom#patch_global('sourceOptions', {
       \ '_': {
       \   'matchers': ['matcher_head'],
       \   'sorters': ['sorter_rank'],
       \   'converters': ['converter_remove_overlap'],
       \   'minAutoCompleteLength': 1
       \ },
       \ 'around': {
       \   'mark': 'A',
       \ },
       \ 'deoppet': {
       \   'dup': v:true,
       \   'mark': 'dp',
       \  },
       \ 'file': {
       \   'mark': 'F',
       \   'isVolatile': v:true,
       \   'forceCompletionPattern': '\S/\S*',
       \ },
       \ 'nvim-lsp': {
       \   'mark': 'LSP',
       \   'dup': v:true,
       \   'forceCompletionPattern': '\.\w*|:\w*|->\w*'
       \ },
       \ })

  call ddc#custom#patch_global('sourceParams', {
       \ 'around': {'maxSize': 30},
	     \ 'nvim-lsp': {'maxSize': 500},
       \ })

  call ddc#custom#patch_global('filterParams', {
       \ 'matcher_fuzzy': {'splitMode': 'character'},
       \ 'converter_fuzzy': {'hlGroup': 'SpellBad'}
       \ })

  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/deoppet.nvim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_source = 'ddc.vim'
on_event = 'InsertEnter'
hook_source = '''
  call deoppet#initialize()

  call deoppet#custom#option('snippets',
  \ map(globpath(&runtimepath, 'neosnippets', 1, 1),
  \     { _, val -> { 'path': val } }))

  imap <C-k>  <Plug>(deoppet_expand)
  imap <C-f>  <Plug>(deoppet_jump_forward)
  imap <C-b>  <Plug>(deoppet_jump_backward)
  smap <C-f>  <Plug>(deoppet_jump_forward)
  smap <C-b>  <Plug>(deoppet_jump_backward)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
  imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  let g:vsnip_filetypes = {}
'''

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
  call popup_preview#enable()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
  call signature_help#enable()
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['impatient.nvim', 'ddc.vim']
on_event = 'BufEnter'
#on_ft = ['rust', 'scala', 'typescript']
lua_source = '''
  local opts = { noremap=true, silent=true }
  vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
  vim.api.nvim_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
  vim.api.nvim_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)

  -- Use an on_attach function to only map the following keys
  -- after the language server attaches to the current buffer
  local on_attach = function(client, bufnr)
    -- Enable completion triggered by <c-x><c-o>
    vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

    -- Mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gy', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
  end

  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  ------------------------------------------------
  -- Rust
  ------------------------------------------------
  require'lspconfig'.rust_analyzer.setup{
    on_attach = on_attach,
    settings = {
      -- ref: https://rust-analyzer.github.io/manual.html#configuration
      ["rust-analyzer"] = {
        imports = {
          granularity = {
            group = "module",
          },
          prefix = "self",
        },
        cargo = {
          buildScripts = {
            enable = true,
          },
        },
        procMacro = {
          enable = true
        },
      }
    },
    handlers = {
      ["textDocument/definition"] = function(_, result, params)
        -- エラーは Maan2003/lsp_lines.nvim にお任せするの表示しないようにする
        return nil
      end
    }
  }

  ------------------------------------------------
  -- Deno
  ------------------------------------------------
  require'lspconfig'.denols.setup{
    on_attach = on_attach
  }
'''

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_event = 'VimEnter'
lua_source = '''
  ------------------------------------------------
  -- LSP Server Start
  ------------------------------------------------
  function lsp_server_setup(server_name)
    local lsp_installer_servers = require'nvim-lsp-installer.servers'

    -- available_server: nvim-lsp-installerが対応しているサーバーかを示す
    -- default_config: 対応している場合は、そのサーバーのdefault configが含まれている
    local available_server, default_config = lsp_installer_servers.get_server(server_name)

    -- nvim-lsp-installerに対応していないサーバーの場合はエラーを表示して終了
    if not available_server then
      error(string.format("nvim-lsp-installer doesn't support %s server.", server_name))
      return
    end

    default_config:on_ready(function ()
      local opts = {}
      default_config:setup(opts)
    end)

    -- サーバーがインストールされていない場合はインストールする
    if not default_config:is_installed() then
      default_config:install()
    end
  end

  ------------------------------------------------
  -- LSP mapping
  ------------------------------------------------
  function lsp_mapping()

    local function map(mode, lhs, rhs, opts)
      local options = { noremap = true }
      if opts then
        options = vim.tbl_extend("force", options, opts)
      end
      vim.api.nvim_set_keymap(mode, lhs, rhs, options)
    end

    map("n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>")
    map("n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>")
    map("n", "gr", "<cmd>lua vim.lsp.buf.references()<CR>")
    map("n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>")
    map("n", "<C-k>", "<cmd>lua vim.lsp.buf.signature_help()<CR>")
    map("n", "<space>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>")
  end
'''

[[plugins]]
repo = 'scalameta/nvim-metals'
on_ft = 'scala'
hook_source = '''
  " TVP
  :command TVP  lua require("metals.tvp").toggle_tree_view()
  :command TVPR lua require("metals.tvp").reveal_in_tree()
'''
lua_source = '''
  local cmd = vim.cmd

  local function map(mode, lhs, rhs, opts)
    local options = { noremap = true }
    if opts then
      options = vim.tbl_extend("force", options, opts)
    end
    vim.api.nvim_set_keymap(mode, lhs, rhs, options)
  end

  ------------------------------------------------
  -- global
  ------------------------------------------------
  vim.opt_global.completeopt = { "menu", "noinsert", "noselect" }
  vim.opt_global.shortmess:remove("F"):append("c")

  ------------------------------------------------
  -- LSP mapping
  ------------------------------------------------
  map("n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>")
  map("n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>")
  map("n", "gr", "<cmd>lua vim.lsp.buf.references()<CR>")
  map("n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>")
  map("n", "<C-k>", "<cmd>lua vim.lsp.buf.signature_help()<CR>")
  map("n", "<space>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>")
  map("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>")

  ------------------------------------------------
  -- command
  ------------------------------------------------
  cmd([[augroup lsp]])
  cmd([[autocmd!]])
  cmd([[autocmd FileType scala setlocal omnifunc=v:lua.vim.lsp.omnifunc]])
  -- Java のLSPも利用する場合はここがコンフリクトする可能性がある
  cmd([[autocmd FileType java,scala,sbt lua require("metals").initialize_or_attach(metals_config)]])
  cmd([[augroup end]])

  ------------------------------------------------
  -- Metals Settings
  ------------------------------------------------
  metals_config = require("metals").bare_config()

  metals_config.settings = {
    excludedPackages = { "akka.actor.typed.javadsl" },
    showImplicitArguments = true,
    showInferredType = true,
  }
'''

###################################################
# エラー関連
###################################################
[[plugins]]
repo = 'folke/trouble.nvim'
depends = ['nvim-web-devicons']
on_event = 'BufEnter'
hook_add = '''
  nnoremap <S-t><S-t> :<C-u> TroubleToggle workspace_diagnostics<CR>
  nnoremap <S-t><S-d> :<C-u> TroubleToggle document_diagnostics<CR>
  :command TC                TroubleClose
'''
lua_source = '''
  require("trouble").setup {}
'''

###################################################
# シンタクスハイライト関連
###################################################
[[plugins]]
repo = 'p00f/nvim-ts-rainbow'
on_event = 'VimEnter'
depends = ['nvim-treesitter']

[[plugins]]
repo = 'andymass/vim-matchup'
on_event = 'VimEnter'
depends = ['nvim-treesitter']

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'VimEnter'
hook_done_update = ":TSUpdate"
lua_source = '''
  require'nvim-treesitter.configs'.setup {
    ensure_installed = {
      "bash",
      "css",
      "dockerfile",
      "hocon",
      "html",
      "json",
      "lua",
      "php",
      "rust",
      "scala",
      "sql",
      "toml",
      "vim"
    },

    -- Install parsers synchronously (only applied to `ensure_installed`)
    sync_install = false,

    -- Automatically install missing parsers when entering buffer
    auto_install = true,

    highlight = {
      enable = true,
      additional_vim_regex_highlighting = false,
      disable = function(lang, bufnr)
        local filename = vim.api.nvim_buf_get_name(0)
        local is_dein = string.find(filename, ".dein.toml")
        local is_dein_lazy = string.find(filename, ".dein_lazy.toml")

        -- .dein.toml または .dein_lazy.toml では vim-precious を使いたいので、treesitter を有効にしない
        return is_dein ~= nil or is_dein_lazy ~= nil
      end,
    },
    -- p00f/nvim-ts-rainbow
    rainbow = {
      enable = true,
      extended_mode = true,
      max_file_lines = 300,
    },
    -- andymass/vim-matchup
    matchup = {
      enable = true,
    },
  }
'''

# toml
#[[plugins]]
#repo = 'cespare/vim-toml'
#on_ft = 'toml'

# Scala
#[[plugins]]
#repo = 'derekwyatt/vim-scala'
#on_ft = 'scala'
#hook_add = '''
#  au BufRead,BufNewFile *.sbt,*.sc set filetype=scala
#'''

## Rust
#[[plugins]]
#repo = 'rust-lang/rust.vim'
#on_ft = 'rust'
#hook_add = '''
#"  let g:rustfmt_autosave = 1
#'''

# JavaScript
[[plugins]]
repo = 'neovim/node-host'
build = 'npm install'
on_ft = 'javascript'

[[plugins]]
repo = 'billyvg/tigris.nvim'
depends = ['node-host']
build = './install.sh'
on_ft = 'javascript'
hook_add = '''
  let g:tigris#enabled = 1
  let g:tigris#on_the_fly_enabled = 1
  let g:tigris#delay = 300
'''

# PHP
[[plugins]]
repo = 'TysonAndre/php-vim-syntax'
on_ft = 'php'
lua_post_source = '''
  -- LSP Server Start
  lsp_server_setup('intelephense')

  -- LSP mapping
  lsp_mapping()
'''

# TypeScript
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

# Dockerfile
[[plugins]]
repo = 'honza/dockerfile.vim'
on_ft = 'Dockerfile'

# Clojure
[[plugins]]
repo = 'clojure-vim/clojure.vim'
on_ft = 'clojure'
lua_post_source = '''
  -- LSP Server Start
  lsp_server_setup('clojure_lsp')

  -- LSP mapping
  lsp_mapping()
'''
