###################################################
# ハイライト/補完
###################################################
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim']
on_event = 'InsertEnter'
hook_post_source = '''
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif

  " 起動時に有効にする
  let g:deoplete#enable_at_startup = 1

  " 補完を開始する文字数
  let g:deoplete#auto_complete_start_length = 1

  " 大文字小文字を無視する
  let g:deoplete#enable_ignore_case = 1

  " バッファからも補完候補を読む
  let g:deoplete#file#enable_buffer_path = 1

  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
  \  neosnippet#expandable_or_jumpable() ?
  \   "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['context_filetype.vim', 'neosnippet-snippets']
on_event = 'InsertEnter'
hook_post_source = '''
  " キーマップ
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)

  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
depends = ['context_filetype.vim']
on_event = 'InsertEnter'

# toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# javascript
[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = ['html', 'javascript', 'javascript.jsx', 'vue']
hook_post_source = '''
  let g:deoplete#sources#ternjs#tern_bin = '/usr/local/bin/tern'
  let g:deoplete#sources#ternjs#timeout = 1
  let g:deoplete#sources#ternjs#filetypes = ['jsx', 'javascript.jsx', 'vue']
'''

# javascript
[[plugins]]
repo = 'billyvg/tigris.nvim'
on_ft = ['html', 'javascript', 'javascript.jsx', 'vue']

# javascript library
[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = ['html', 'javascript', 'javascript.jsx', 'vue']

# ES6
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['html', 'javascript', 'javascript.jsx', 'vue']

# JSX
[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['html', 'javascript', 'javascript.jsx', 'vue']

# Vue.js
[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['html', 'javascript', 'javascript.jsx', 'vue']

# Vue.js
[[plugins]]
repo = 'leafOfTree/vim-vue-plugin'
on_ft = ['vue']

# Elm
[[plugins]]
repo = 'ElmCast/elm-vim'
on_ft = ['elm']
hook_post_source = '''

  let g:elm_setup_keybindings = 0

  let g:elm_format_autosave = 1
  let g:elm_jump_to_error = 1

  autocmd BufWritePre *.elm ElmFormat
'''

# Scala
[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'
hook_add = '''
  au BufRead,BufNewFile *.sbt set filetype=scala
'''

[[plugins]]
repo = 'scalameta/coc-metals'
on_ft = 'scala'
build = 'yarn install --frozen-lockfile'
hook_add = '''

  " Use tab for trigger completion with characters ahead and navigate.
  " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  " Used in the tab autocompletion for coc
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Remap keys for gotos
  nmap <silent> cgd <Plug>(coc-definition)
  nmap <silent> cgy <Plug>(coc-type-definition)
  nmap <silent> cgi <Plug>(coc-implementation)
  nmap <silent> cgr <Plug>(coc-references)

  nnoremap <silent> cK :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction
'''

###################################################
# 構文チェック
###################################################
[[plugins]]
repo = 'w0rp/ale'
on_ft = ['html', 'javascript', 'javascript.jsx', 'vue']
hook_post_source = '''
  " 保存時のみ実行する
  let g:ale_lint_on_text_changed = 0

  " Lint
  let g:ale_linters = {
  \  'css': ['stylelint'],
  \  'javascript': ['eslint'],
  \  'vue': ['eslint'],
  \}

  " 整形
  let g:ale_fix_on_save = 1
  let g:ale_fixers = {
  \  'javascript': ['prettier-eslint'],
  \  'css': ['stylelint'],
  \  'scss': ['stylelint'],
  \}

  " Ctrl + kで次の指摘へ、Ctrl + jで前の指摘へ移動
  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
  nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''
