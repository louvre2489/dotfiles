###################################################
# プラグイン マネージャー
###################################################
[[plugins]]
repo = 'Shougo/dein.vim'

###################################################
# ファイラ
###################################################
[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
 " 起動時に呼び出し
 augroup fern_enter
   autocmd!
   autocmd VimEnter * ++nested Fern . -reveal=% -drawer
 augroup END

 " Ctrl+e 呼び出し
 nnoremap <silent><C-e> :Fern . -reveal=% -drawer -toggle<CR>

 " レイアウト
 let g:fern#default_hidden=1
 let g:fern#renderer="nerdfont"

 function! FernInit() abort
   nmap <buffer><expr>
         \ <Plug>(fern-my-open-expand-collapse)
         \ fern#smart#leaf(
         \   "\<Plug>(fern-action-open:select)",
         \   "\<Plug>(fern-action-expand)",
         \   "\<Plug>(fern-action-collapse)",
         \ )
   nmap <buffer> <CR> <Plug>(fern-my-open-expand-collapse)
   nmap <buffer> o <Plug>(fern-my-open-expand-collapse)
   nmap <buffer> <2-LeftMouse> <Plug>(fern-my-open-expand-collapse)
   nmap <buffer> mf <Plug>(fern-action-new-file)
   nmap <buffer> md <Plug>(fern-action-new-dir)
   nmap <buffer> D <Plug>(fern-action-remove)
   nmap <buffer> mv <Plug>(fern-action-move)
   nmap <buffer> r <Plug>(fern-action-rename)
   nmap <buffer> s <Plug>(fern-action-open:split)
   nmap <buffer> v <Plug>(fern-action-open:vsplit)
   nmap <buffer> R <Plug>(fern-action-reload)
   nmap <buffer> <nowait> d <Plug>(fern-action-hidden:toggle)
   nmap <buffer> <nowait> < <Plug>(fern-action-leave)
   nmap <buffer> <nowait> > <Plug>(fern-action-enter)
 endfunction

 augroup FernEvents
   autocmd!
   autocmd FileType fern call FernInit()
 augroup END
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'

[[plugins]]
repo = 'csch0/vim-startify-renderer-nerdfont'

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
hook_add = '''
  augroup my-glyph-palette
    autocmd! *
    autocmd FileType fern call glyph_palette#apply()
    autocmd FileType nerdtree,startify call glyph_palette#apply()
  augroup END
'''

###################################################
# vim-buffergator
###################################################
[[plugins]]
repo = 'jeetsukumaran/vim-buffergator'
hook_add = '''
  """ How To Use """
  "<Leader>b    Open buffer
  "cs           Cycle through sort regimes.
  "cd           Cycle through display regimes.
  "cp           Toggle showing full paths (only "basename" display regime)
  "cw           Cycle through window (viewport) split modes.
  "cq           Cycle through quit (autodismiss-on-select) policies.
  "r            Update (rebuild/refresh) index.
  "d            Delete the selected buffer.
  "D            Unconditionally delete the selected buffer.
  "x            Wipe the selected buffer.
  "X            Unconditionally wipe the selected buffer.
  "q            Quit the index/catalog window.
  """"""""""""""""""
  let g:buffergator_viewport_split_policy = "T"
'''

###################################################
# Git
###################################################
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  " diffを縦分割
  set diffopt+=vertical

  highlight SignColumn ctermbg = lightgrey

  " diffを縦分割
  set diffopt+=vertical

  " 表示列の背景色変更
  let gitgutter_override_sign_column_highlight = 0
  "
  " 表示するマークのカスタマイズ
  let g:gitgutter_sign_added = '✚'
  let g:gitgutter_sign_modified = '➤'
  let g:gitgutter_sign_removed = '✘'
  let g:gitgutter_sign_modified_removed = "➜"

  " 変更箇所に着色
  let g:gitgutter_highlight_lines = 1

  autocmd Vimenter,Colorscheme * :hi GitGutterAddLine ctermfg=none ctermbg=17
  autocmd Vimenter,Colorscheme * :hi GitGutterChangeLine ctermfg=none ctermbg=53
  autocmd Vimenter,Colorscheme * :hi GitGutterDeleteLine ctermfg=none ctermbg=52
  autocmd Vimenter,Colorscheme * :hi GitGutterChangeDeleteLine ctermfg=none ctermbg=53
'''

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info)
    " commitia使用時はfernが不要なので閉じる
    autocmd VimEnter * ++nested Fern . -reveal=% -drawer -toggle
    autocmd WinNew * <C-w><LEFT>  " なぜかcommitiaの右ウインドウにフォーカスが移ってしまうので、左のウインドウに移動させる

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)

    " 起動時に必要に応じてdiffを確認したいので、インサートモードでの起動はOFFにしておく
"     " 起動と同時にインサートモードにする
"     if a:info.vcs ==# 'git' && getline(1) ==# ''
"       startinsert
"     end
  endfunction
'''

###################################################
# 装飾
###################################################
[[plugins]]
repo = 'itchyny/landscape.vim'
#repo = 'junegunn/seoul256.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  set list listchars=tab:\¦\

  let g:indentLine_color_term = 111
  let g:indentLine_color_gui = '#708090'
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  " タブバーのカスタマイズを有効にする
  let g:airline#extensions#tabline#enabled = 1

  " タブバーの右領域を非表示にする
  let g:airline#extensions#tabline#show_splits = 0
  let g:airline#extensions#tabline#show_tab_type = 0
  let g:airline#extensions#tabline#show_close_button = 0

  " テーマ
  let g:airline_theme='jellybeans'
  let g:airline_powerline_fonts = 1

  " ブランチ
  let g:airline#extensions#branch#enabled = 1
  let g:airline#extensions#branch#vcs_priority = ["git", "mercurial"]

  " レイアウト
  let g:airline#extensions#default#layout = [
  \ [ 'z', 'a', 'b', 'c' ],
  \ [ 'x', 'y', 'error', 'warning']
  \ ]
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'unblevable/quick-scope'
hook_add = '''
  " Trigger a highlight in the appropriate direction when pressing these keys
  let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
'''

[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
  augroup matchup_matchparen_highlight
    autocmd!
    autocmd ColorScheme * hi MatchParen ctermbg=darkcyan guibg=darkcyan
  augroup END
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1
'''

###################################################
# エディター系
###################################################
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  " <Leader> is \

  " 行の最初の文字の前にコメント文字をトグル
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)

  " 行頭にコメントをトグル
  nmap <Leader>, <Plug>(caw:zeropos:toggle)
  vmap <Leader>, <Plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

###################################################
# 便利ツール
###################################################
[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'LeafCage/yankround.vim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'yuki-yano/fzf-preview.vim'
rev = 'release/rpc'
hook_add = '''
  nmap <Space> [fzf-p]
  xmap <Space> [fzf-p]
  " Git Status
  nnoremap <silent> [fzf-p]gs    :<C-u>FzfPreviewGitStatusRpc<CR>
  " バッファー
  nnoremap <silent> [fzf-p]b     :<C-u>FzfPreviewBuffersRpc<CR>
  nnoremap <silent> [fzf-p]B     :<C-u>FzfPreviewAllBuffersRpc<CR>
  nnoremap <silent> [fzf-p]/     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
  nnoremap <silent> [fzf-p]*     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
  nnoremap          [fzf-p]gr    :<C-u>FzfPreviewProjectGrepRpc<Space>
  xnoremap          [fzf-p]gr    "sy:FzfPreviewProjectGrepRpc<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
  nnoremap <silent> [fzf-p]l     :<C-u>FzfPreviewLocationListRpc<CR>
'''

###################################################
# Coc.nvim
###################################################
#[[plugins]]
#repo = 'neoclide/coc.nvim'
#merge = 0
#build = 'yarn install --frozen-lockfile'
#hook_post_source = '''
#  call coc#util#install()
#'''
#hook_add = '''
#  " 使用するextension
#  " coc-yankの代替が見つからないので、そのためだけにcoc.nvimを利用する
#  let g:coc_global_extensions = [
#  \  'coc-yank'
#  \]
#
#  "---------------------------------------------------
#  " coc-yank
#  "---------------------------------------------------
#  " Show yank list by coc-yank
#  nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
#  " Clean yank list by coc-yank
#  nnoremap <silent> <space>Y  :<C-u>CocCommand yank.clean<cr>
#'''

###################################################
# 開発ツール
###################################################
# F#
[[plugins]]
repo = 'ionide/Ionide-vim'
build = 'make fsautocomplete'

###################################################
# deno
###################################################
[[plugins]]
repo = 'vim-denops/denops.vim'

