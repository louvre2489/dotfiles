###################################################
# プラグイン マネージャー
###################################################
[[plugins]]
repo = 'Shougo/dein.vim'

###################################################
# denite
###################################################
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nmap <Space> [denite]

  " フローティング
  let s:denite_win_width_percent = 0.85
  let s:denite_win_height_percent = 0.7

  let s:denite_default_options = {
      \ 'split': 'floating',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
      \ 'highlight_filter_background': 'DeniteFilter',
      \ 'prompt': '>>',
      \ 'start_filter': v:false
      \ }

  let s:denite_option_array = []

  for [key, value] in items(s:denite_default_options)
    call add(s:denite_option_array, '-'.key.'='.value)
  endfor

  call denite#custom#option('default', s:denite_default_options)

  augroup denite_filter
    autocmd FileType denite call s:denite_settings()

    function! s:denite_settings() abort
      nnoremap <silent><buffer><expr> <CR>
      \ denite#do_map('do_action')
      nnoremap <silent><buffer><expr> d
      \ denite#do_map('do_action', 'delete')
      nnoremap <silent><buffer><expr> p
      \ denite#do_map('do_action', 'preview')
      nnoremap <silent><buffer><expr> q
      \ denite#do_map('quit')
      nnoremap <silent><buffer><expr> i
      \ denite#do_map('open_filter_buffer')
      nnoremap <silent><buffer><expr> <Space>
      \ denite#do_map('toggle_select').'j'
    endfunction
  augroup END

  " agを使用する
  call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])

  " フィルタ設定
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
    \ [ '.git/', '.ropeproject/', '__pycache__/',
    \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

  " grep設定
  call denite#custom#var('grep', 'command', ['ag'])
	call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep', '--hidden'])
	call denite#custom#var('grep', 'recursive_opts', [])
	call denite#custom#var('grep', 'pattern_opt', [])
	call denite#custom#var('grep', 'separator', ['--'])
	call denite#custom#var('grep', 'final_opts', [])

  command! -nargs=? Dgrep call s:Dgrep(<f-args>)
  function s:Dgrep(...)
    if a:0 > 0
      execute(':Denite -buffer-name=grep-buffer-denite grep -path='.a:1)
    else
      execute(':Denite -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').' grep')
    endif
  endfunction

  " grep結果を再表示
  command! Dresume execute(':Denite -resume -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').'')
  " 次へ
  command! Dnext execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately '.join(s:denite_option_array, ' ').'')
  " 前へ
  command! Dprev execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately '.join(s:denite_option_array, ' ').'')

  " キーマップ
  " カレントディレクトリを表示
  nnoremap <silent> [denite]a :Denite file/rec<CR>

  " バッファを表示
  nnoremap <silent> [denite]b :Denite buffer<CR>

  " ファイル一覧を表示
  nnoremap <silent> [denite]f :Denite -buffer-name=file file<CR>

  " 最近使ったファイルの一覧
  nnoremap <silent> [denite]fr :Denite file/old<CR>

  " neoyank
  nnoremap <silent> [denite]ny :Denite neoyank<CR>

  " grep検索
  nnoremap <silent> [denite]g  :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>
  " Denite grep検索結果を再表示する
  nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>

  " カーソル位置の単語をgrep検索
  nnoremap <silent> [denite],cg :<C-u>DeniteCursorWord grep -buffer-name=search line<CR><C-R><C-W><CR>

  " プロンプトの左端に表示される文字を指定
  call denite#custom#option('default', 'prompt', '>>')

  " denite/insert モードのときは，C- で移動できるようにする
  "call denite#custom#map('insert', "<C-j>", '<denite:move_to_next_line>')
  "call denite#custom#map('insert', "<C-k>", '<denite:move_to_previous_line>')

  " C-N,C-Pで上下移動
  call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')

  " ESCキーでdeniteを終了
  call denite#custom#map('insert', '<esc>', '<denite:enter_mode:normal>', 'noremap')
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

###################################################
# Git
###################################################
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  " diffを縦分割
  set diffopt+=vertical

  " ---------------------------------------
  " vim-gitgutter
  " ---------------------------------------
  highlight SignColumn ctermbg = lightgrey

  " diffを縦分割
  set diffopt+=vertical

  " 表示列の背景色変更
  let gitgutter_override_sign_column_highlight = 0
  "
  " 表示するマークのカスタマイズ
  let g:gitgutter_sign_added = '✚'
  let g:gitgutter_sign_modified = '➤'
  let g:gitgutter_sign_removed = '✘'
  let g:gitgutter_sign_modified_removed = "➜"

  " 変更箇所に着色
  let g:gitgutter_highlight_lines = 1

  autocmd Vimenter,Colorscheme * :hi GitGutterAddLine ctermfg=none ctermbg=17
  autocmd Vimenter,Colorscheme * :hi GitGutterChangeLine ctermfg=none ctermbg=53
  autocmd Vimenter,Colorscheme * :hi GitGutterDeleteLine ctermfg=none ctermbg=52
  autocmd Vimenter,Colorscheme * :hi GitGutterChangeDeleteLine ctermfg=none ctermbg=53
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'lambdalisue/gina.vim'

###################################################
# Nerd Tree
###################################################
#[[plugins]]
#repo = 'scrooloose/nerdtree'
#hook_add = '''
#  nmap <C-e> [nerdtree]
#
#  nmap nt <plug>NERDTreeTabsToggle<cr>
#  nmap <silent> [nerdtree] <plug>NERDTreeTabsToggle<CR>
#  vmap <silent> [nerdtree] <Esc> <plug>NERDTreeTabsToggle<CR>
#  omap <silent> [nerdtree] <plug>NERDTreeTabsToggle<CR>
#  imap <silent> [nerdtree] <Esc> :<plug>NERDTreeTabsToggle<CR>
#
#  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
#
#  let g:NERDTreeShowHidden=1
#'''
#
#[[plugins]]
#repo = 'jistr/vim-nerdtree-tabs'
#hook_add = '''
#  " ファイルが指定されていなければNERD treeを有効にする
#  if argc() == 0
#    let g:nerdtree_tabs_open_on_console_startup = 1
#  end
#'''
#
#[[plugins]]
#repo = 'Xuyuanp/nerdtree-git-plugin'
#hook_add = '''
#  let g:NERDTreeIndicatorMapCustom = {
#  \ "Modified"  : "➤",
#  \ "Staged"    : "✚",
#  \ "Untracked" : "✭",
#  \ "Renamed"   : "➜",
#  \ "Unmerged"  : "═",
#  \ "Deleted"   : "✖",
#  \ "Dirty"     : "✗",
#  \ "Clean"     : "✔︎",
#  \ 'Ignored'   : '☒',
#  \ "Unknown"   : "?"
#  \ }
#'''

###################################################
# defx.nvim
###################################################
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
	autocmd FileType defx call s:defx_my_settings()
	function! s:defx_my_settings() abort
	  " Define mappings
	  nnoremap <silent><buffer><expr> <CR>
	  \ defx#do_action('drop')
	  nnoremap <silent><buffer><expr> c
	  \ defx#do_action('copy')
	  nnoremap <silent><buffer><expr> m
	  \ defx#do_action('move')
	  nnoremap <silent><buffer><expr> p
	  \ defx#do_action('paste')
	  nnoremap <silent><buffer><expr> l
	  \ defx#do_action('drop')
	  nnoremap <silent><buffer><expr> E
	  \ defx#do_action('drop', 'vsplit')
	  nnoremap <silent><buffer><expr> P
	  \ defx#do_action('drop', 'pedit')
	  nnoremap <silent><buffer><expr> o
	  \ defx#do_action('open_or_close_tree')
	  nnoremap <silent><buffer><expr> K
	  \ defx#do_action('new_directory')
	  nnoremap <silent><buffer><expr> N
	  \ defx#do_action('new_file')
	  nnoremap <silent><buffer><expr> M
	  \ defx#do_action('new_multiple_files')
	  nnoremap <silent><buffer><expr> C
	  \ defx#do_action('toggle_columns',
	  \                'mark:indent:icon:filename:type:size:time')
	  nnoremap <silent><buffer><expr> S
	  \ defx#do_action('toggle_sort', 'time')
	  nnoremap <silent><buffer><expr> d
	  \ defx#do_action('remove')
	  nnoremap <silent><buffer><expr> r
	  \ defx#do_action('rename')
	  nnoremap <silent><buffer><expr> !
	  \ defx#do_action('execute_command')
	  nnoremap <silent><buffer><expr> x
	  \ defx#do_action('execute_system')
	  nnoremap <silent><buffer><expr> yy
	  \ defx#do_action('yank_path')
	  nnoremap <silent><buffer><expr> .
	  \ defx#do_action('toggle_ignored_files')
	  nnoremap <silent><buffer><expr> ;
	  \ defx#do_action('repeat')
	  nnoremap <silent><buffer><expr> h
	  \ defx#do_action('cd', ['..'])
	  nnoremap <silent><buffer><expr> ~
	  \ defx#do_action('cd')
	  nnoremap <silent><buffer><expr> q
	  \ defx#do_action('quit')
	  nnoremap <silent><buffer><expr> <Space>
	  \ defx#do_action('toggle_select') . 'j'
	  nnoremap <silent><buffer><expr> *
	  \ defx#do_action('toggle_select_all')
	  nnoremap <silent><buffer><expr> j
	  \ line('.') == line('$') ? 'gg' : 'j'
	  nnoremap <silent><buffer><expr> k
	  \ line('.') == 1 ? 'G' : 'k'
	  nnoremap <silent><buffer><expr> <C-l>
	  \ defx#do_action('redraw')
	  nnoremap <silent><buffer><expr> <C-g>
	  \ defx#do_action('print')
	  nnoremap <silent><buffer><expr> cd
	  \ defx#do_action('change_vim_cwd')
	endfunction

  " エクスプローラーの設定
  call defx#custom#option('_', {
    \ 'winwidth': 30,
    \ 'split': 'vertical',
    \ 'direction': 'topleft',
    \ 'show_ignored_files': 1,
    \ 'buffer_name': 'exlorer',
    \ 'toggle': 1,
    \ 'resume': 1,
    \ 'columns': 'indent:git:icons:filename:mark',
    \ })

  " git アイコン
  " Nerd Font をインストールする必要がある
  call defx#custom#column('git', 'indicators', {
    \ 'Modified'  : '✹',
    \ 'Staged'    : '✚',
    \ 'Untracked' : '✭',
    \ 'Renamed'   : '➜',
    \ 'Unmerged'  : '✖',
    \ 'Ignored'   : '☒',
    \ 'Deleted'   : '✖',
    \ 'Unknown'   : '?'
    \ })

  " Ctrl+e  でDefxを呼び出し
  autocmd VimEnter * execute 'Defx'
  nnoremap <silent> <C-e> :<C-u> Defx <CR>

  " ファイルシステムとの自動同期
  autocmd BufWritePost * call defx#redraw()
  autocmd BufEnter * call defx#redraw()
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'kristijanhusak/defx-git'

###################################################
# 装飾
###################################################
[[plugins]]
repo = 'itchyny/landscape.vim'
#repo = 'junegunn/seoul256.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  set list listchars=tab:\¦\

  let g:indentLine_color_term = 111
  let g:indentLine_color_gui = '#708090'
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  " タブバーのカスタマイズを有効にする
  let g:airline#extensions#tabline#enabled = 1

  " タブバーの右領域を非表示にする
  let g:airline#extensions#tabline#show_splits = 0
  let g:airline#extensions#tabline#show_tab_type = 0
  let g:airline#extensions#tabline#show_close_button = 0

  " テーマ
  let g:airline_theme='jellybeans'
  let g:airline_powerline_fonts = 1

  " ブランチ
  let g:airline#extensions#branch#enabled = 1
  let g:airline#extensions#branch#vcs_priority = ["git", "mercurial"]

  " レイアウト
  let g:airline#extensions#default#layout = [
  \ [ 'z', 'a', 'b', 'c' ],
  \ [ 'x', 'y', 'error', 'warning']
  \ ]
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'unblevable/quick-scope'
hook_add = '''
  " Trigger a highlight in the appropriate direction when pressing these keys
  let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
'''

[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
  augroup matchup_matchparen_highlight
    autocmd!
    autocmd ColorScheme * hi MatchParen ctermbg=darkcyan guibg=darkcyan
  augroup END
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1
'''

###################################################
# エディター系
###################################################
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_settings = {
  \  'variables': {
  \  'lang': "ja"
  \  },
  \  'indentation': '  '
  \}
'''

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  " <Leader> is \

  " 行の最初の文字の前にコメント文字をトグル
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)

  " 行頭にコメントをトグル
  nmap <Leader>, <Plug>(caw:zeropos:toggle)
  vmap <Leader>, <Plug>(caw:zeropos:toggle)
'''

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

###################################################
# gtags
###################################################
[[plugins]]
repo = 'lighttiger2505/gtags.vim'
hook_add = '''
  let g:Gtags_Auto_Map = 0
  let g:Gtags_OpenQuickfixWindow = 1

  " キーマップ
  " Show definetion of function cousor word on quickfix
  nmap <silent> <C-]> :<C-u>exe("Gtags ".expand('<cword>'))<CR>
  " Show reference of cousor word on quickfix
  nmap <silent> <C-t> :<C-u>exe("Gtags -r ".expand('<cword>'))<CR>
'''

[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
  let g:gen_tags#gtags_auto_gen = 1
'''

###################################################
# 便利ツール
###################################################
[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
  " for Ag
  autocmd VimEnter * command! -bang -nargs=* Ag
    \ call fzf#vim#ag(<q-args>, '--hidden', <bang>0)
'''

###################################################
# LSP
###################################################
[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0

build = 'yarn install --frozen-lockfile'

hook_post_source = '''
  call coc#util#install()
'''

hook_add = '''
  command! -nargs=0 Format :call CocAction('format')

  set updatetime=300
'''

