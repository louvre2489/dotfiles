###################################################
# プラグイン マネージャー
###################################################
[[plugins]]
repo = 'Shougo/dein.vim'

###################################################
# 他プラグインから利用される汎用プラグイン
###################################################
[[plugins]]
repo = 'lewis6991/impatient.nvim'
lua_add = '''
  require('impatient')
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
lua_add = '''
  require'nvim-web-devicons'.setup {
    default = true;
  }
'''

###################################################
# ファイラー
###################################################
[[plugins]]
repo = 'nvim-neo-tree/neo-tree.nvim'
depends = ['plenary.nvim', 'nvim-web-devicons', 'nui.nvim']
lua_add = '''
  require("neo-tree").setup({
    popup_border_style = "NC",
    window = {
      position = "float",
    },
    filesystem = {
      window = {
        mappings = {
          ["h"] = "toggle_hidden",
        }
      }
    },
    default_component_configs = {
      git_status = {
         symbols = {
           -- 以下のシンボルはデフォルトを上書き
           added     = "✚",
           modified  = "➤",
        }
      },
    }
  })

  -- ファイラーの起動方法
  vim.api.nvim_set_keymap("n", "<C-e>","<cmd>NeoTreeFloatToggle<CR>",{noremap = true, silent = true})
'''

###################################################
# 装飾
###################################################
[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
lua_add = '''
  require('lualine').setup {
    options = {
      icons_enabled = true,
      theme = 'material',
      disabled_filetypes = {},
      always_divide_middle = true,
      colored = false,
    },
    sections = {
      lualine_a = {'mode'},
      lualine_b = {'branch', 'diff'},
      lualine_c = {
        {
          'filename',
          path = 1,
          file_status = true,
          shorting_target = 40,
          symbols = {
            modified = ' [+]',
            readonly = ' [RO]',
            unnamed = 'Untitled',
          }
        },
        'progress'
      },
      lualine_x = {'filetype', 'encoding'},
      lualine_y = {
        {
          'diagnostics',
          source = {'nvim-lsp'},
          sections = { 'error', 'warn', 'info', 'hint' },

          diagnostics_color = {
            error = 'DiagnosticError',
            warn  = 'DiagnosticWarn',
            info  = 'DiagnosticInfo',
            hint  = 'DiagnosticHint',
          },
          symbols = {error = 'E', warn = 'W', info = 'I', hint = 'H'},
          colored = true,
          update_in_insert = false,
          always_visible = false,
        }
      },
      lualine_z = {'location'}
    },
    inactive_sections = {
      lualine_a = {},
      lualine_b = {},
      lualine_c = {},
      lualine_x = {},
      lualine_y = {},
      lualine_z = {}
    },
    tabline = {
      lualine_a = {'buffers'},
      lualine_b = {},
      lualine_c = {},
      lualine_x = {},
      lualine_y = {},
      lualine_z = {}
    },
    extensions = {}
  }
'''

[[plugins]]
repo = 'unblevable/quick-scope'
hook_add = '''
  " Trigger a highlight in the appropriate direction when pressing these keys
  let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

  augroup qs_colors
    autocmd!
    autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
    autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
  augroup END
'''

###################################################
# 便利ツール
###################################################
#[[plugins]]
#repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
hook_add = '''
  nmap <Space> [telescope]

  nnoremap <silent> [telescope]<Space> <cmd>lua
    \ require('telescope.builtin').find_files{
    \ }<cr>
  nnoremap <silent> [telescope]h <cmd>lua
    \ require('telescope.builtin').find_files{
    \   hidden = true,
    \ }<cr>
  nnoremap <silent> [telescope]b  <cmd>lua
    \ require('telescope.builtin').buffers{
    \  ignore_current_buffer = true,
    \  sort_lastused = true,
    \ }<cr>
  nnoremap <silent> [telescope]gr <cmd>lua
    \ require('telescope.builtin').live_grep{
    \ }<cr>
  nnoremap <silent> [telescope]gs  <cmd>lua
    \ require('telescope.builtin').git_status{
    \ }<cr>
  nnoremap <silent> [telescope]gw  <cmd>lua
    \ require('telescope.builtin').lsp_document_symbols{
    \ }<cr>
  nnoremap <silent> [telescope]in  <cmd>lua
    \ require('telescope.builtin').lsp_code_actions{
    \ }<cr>
'''

lua_add = '''
  local telescope = require('telescope')

  telescope.setup{
    -- 設定が必要になったらここへ
    defaults = {
      sorting_strategy = 'ascending',
      layout_config = {
        prompt_position = 'top',
      },
      file_ignore_patterns = {
        '.git/',
        'target/',
        '.metals/',
        '.bloop/'
      },
    },
  }
'''

[[plugins]]
repo = 'jeetsukumaran/vim-buffergator'
hook_add = '''

  let g:buffergator_viewport_split_policy = 'T'

  " 起動方法
  :command BB :BuffergatorOpen
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
  " 【Ctrl + o】 float windowでターミナルを表示
  nnoremap <silent><C-o> :<C-u>Deol -split=floating -winheight=30 -winwidth=100<CR>
  " 【ESC】 ターミナルモードから抜ける
  tnoremap <ESC>   <C-\><C-n>
'''

[[plugins]]
repo = 'reireias/vim-cheatsheet'
hook_add = '''
  let g:cheatsheet#cheat_file = '~/dotfiles/cheatsheet.md'

  let g:cheatsheet#float_window = 1

  let g:cheatsheet#float_window_width_ratio = 0.6
  let g:cheatsheet#float_window_height_ratio = 1.0

  " チートシートの編集
  command! EditCheat :edit ~/dotfiles/cheatsheet.md

  nnoremap <Space>? <Cmd>Cheat<CR>
  nnoremap <Space>E <Cmd>EditCheat<CR>
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
#on_ft = ['rust', 'scala', 'typescript']
lua_add = '''
  local opts = { noremap=true, silent=true }
  vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
  vim.api.nvim_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
  vim.api.nvim_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)

  -- Use an on_attach function to only map the following keys
  -- after the language server attaches to the current buffer
  local on_attach = function(client, bufnr)
    -- Enable completion triggered by <c-x><c-o>
    vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

    -- Mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gy', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
  end

  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  ------------------------------------------------
  -- Rust
  ------------------------------------------------
  require'lspconfig'.rust_analyzer.setup{
    on_attach = on_attach,
    settings = {
      -- ref: https://rust-analyzer.github.io/manual.html#configuration
      ["rust-analyzer"] = {
        imports = {
          granularity = {
            group = "module",
          },
          prefix = "self",
        },
        cargo = {
          buildScripts = {
            enable = true,
          },
        },
        procMacro = {
          enable = true
        },
      }
    },
    handlers = {
      ["textDocument/definition"] = function(_, result, params)
        -- エラーは Maan2003/lsp_lines.nvim にお任せするの表示しないようにする
        return nil
      end
    }
  }

  ------------------------------------------------
  -- Deno
  ------------------------------------------------
  require'lspconfig'.denols.setup{
    on_attach = on_attach
  }
'''

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
lua_add = '''
  require("nvim-lsp-installer").setup {
  }

  ------------------------------------------------
  -- LSP mapping
  ------------------------------------------------
  function lsp_mapping()

    local function map(mode, lhs, rhs, opts)
      local options = { noremap = true }
      if opts then
        options = vim.tbl_extend("force", options, opts)
      end
      vim.api.nvim_set_keymap(mode, lhs, rhs, options)
    end

    map("n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>")
    map("n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>")
    map("n", "gr", "<cmd>lua vim.lsp.buf.references()<CR>")
    map("n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>")
    map("n", "<C-k>", "<cmd>lua vim.lsp.buf.signature_help()<CR>")
    map("n", "<space>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>")
  end
'''

###################################################
# deno
###################################################
[[plugins]]
repo = 'vim-denops/denops.vim'
hook_add = '''
"  if executable("typescript-language-server")
"    " グローバルインストールされたnpmモジュールの保存場所
"    let s:npm_root = trim(system("npm root -g"))
"
"    " vim-lspのinitialization_optionsを使用して、typescript-deno-pluginのインストール場所をtypescript-language-serverへ伝えます
"    let s:has_typescript_deno_plugin = isdirectory(s:npm_root . "/typescript-deno-plugin")
"    let s:plugins = s:has_typescript_deno_plugin
"      \ ? [{ "name": "typescript-deno-plugin", "location": s:npm_root }]
"      \ : []
"    augroup LspTypeScript
"      autocmd!
"      autocmd User lsp_setup call lsp#register_server({
"      \   "name": "typescript-language-server",
"      \   "cmd": {server_info -> ["typescript-language-server", "--stdio"]},
"      \   "root_uri": {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"      \   "whitelist": ["typescript", "typescript.tsx"],
"      \   "initialization_options": { "plugins": s:plugins },
"      \ })
"    augroup END
"  endif
  if executable("deno")
    augroup LspTypeScript
      autocmd!
      autocmd User lsp_setup call lsp#register_server({
      \ "name": "deno lsp",
      \ "cmd": {server_info -> ["deno", "lsp"]},
      \ "root_uri": {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), "tsconfig.json"))},
      \ "whitelist": ["typescript", "typescript.tsx"],
      \ })
    augroup END
  endif
'''
