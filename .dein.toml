###################################################
# プラグイン マネージャー
###################################################
[[plugins]]
repo = 'Shougo/dein.vim'

###################################################
# ファイラ
###################################################
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
	autocmd FileType defx call s:defx_my_settings()

	function! s:defx_my_settings() abort
	  " Define mappings
	  nnoremap <silent><buffer><expr> <CR>
		\ defx#do_action('multi', ['drop', 'quit'])
	  nnoremap <silent><buffer><expr> c
	  \ defx#do_action('copy')
	  nnoremap <silent><buffer><expr> m
	  \ defx#do_action('move')
	  nnoremap <silent><buffer><expr> p
	  \ defx#do_action('paste')
	  nnoremap <silent><buffer><expr> E
	  \ defx#do_action('drop', 'vsplit')
	  nnoremap <silent><buffer><expr> P
	  \ defx#do_action('drop', 'pedit')
	  nnoremap <silent><buffer><expr> o
	  \ defx#do_action('open_or_close_tree')
	  nnoremap <silent><buffer><expr> K
	  \ defx#do_action('new_directory')
	  nnoremap <silent><buffer><expr> N
	  \ defx#do_action('new_file')
	  nnoremap <silent><buffer><expr> M
	  \ defx#do_action('new_multiple_files')
	  nnoremap <silent><buffer><expr> C
	  \ defx#do_action('toggle_columns',
	  \                'mark:indent:icon:filename:type:size:time')
	  nnoremap <silent><buffer><expr> S
	  \ defx#do_action('toggle_sort', 'time')
	  nnoremap <silent><buffer><expr> d
	  \ defx#do_action('remove')
	  nnoremap <silent><buffer><expr> r
	  \ defx#do_action('rename')
	  nnoremap <silent><buffer><expr> !
	  \ defx#do_action('execute_command')
	  nnoremap <silent><buffer><expr> x
	  \ defx#do_action('execute_system')
	  nnoremap <silent><buffer><expr> yy
	  \ defx#do_action('yank_path')
	  nnoremap <silent><buffer><expr> .
	  \ defx#do_action('toggle_ignored_files')
	  nnoremap <silent><buffer><expr> ;
	  \ defx#do_action('repeat')
	  nnoremap <silent><buffer><expr> h
	  \ defx#do_action('cd', ['..'])
	  nnoremap <silent><buffer><expr> ~
	  \ defx#do_action('cd')
	  nnoremap <silent><buffer><expr> q
	  \ defx#do_action('quit')
	  nnoremap <silent><buffer><expr> <Space>
	  \ defx#do_action('toggle_select') . 'j'
	  nnoremap <silent><buffer><expr> *
	  \ defx#do_action('toggle_select_all')
	  nnoremap <silent><buffer><expr> j
	  \ line('.') == line('$') ? 'gg' : 'j'
	  nnoremap <silent><buffer><expr> k
	  \ line('.') == 1 ? 'G' : 'k'
	  nnoremap <silent><buffer><expr> <C-l>
	  \ defx#do_action('redraw')
	  nnoremap <silent><buffer><expr> <C-g>
	  \ defx#do_action('print')
	  nnoremap <silent><buffer><expr> cd
	  \ defx#do_action('change_vim_cwd')
	endfunction

  " エクスプローラーの設定
  call defx#custom#column('time', {
        \ 'format': '%Y/%m/%d %H:%M',
	      \ })
  call defx#custom#option('_', {
    \ 'winwidth': 130,
    \ 'split': 'floating',
    \ 'direction': 'topleft',
    \ 'show_ignored_files': 1,
    \ 'buffer_name': 'explorer',
    \ 'toggle': 1,
    \ 'resume': 1,
    \ 'columns': 'git:icons:filename:mark:type:time',
    \ })

  " git アイコン
  " Nerd Font をインストールする必要がある
  call defx#custom#column('git', 'indicators', {
    \ 'Modified'  : '✹',
    \ 'Staged'    : '✚',
    \ 'Untracked' : '✭',
    \ 'Renamed'   : '➜',
    \ 'Unmerged'  : '✖',
    \ 'Ignored'   : '☒',
    \ 'Deleted'   : '✖',
    \ 'Unknown'   : '?'
    \ })

  " 起動時にDefxを呼び出し
"  autocmd VimEnter * execute 'Defx'
  " Ctrl+e  でDefxを呼び出し
  nnoremap <silent> <C-e> :<C-u> Defx <CR>
  " ファイルシステムとの自動同期
  autocmd BufWritePost * call defx#redraw()
  autocmd BufEnter * call defx#redraw()
'''

# Defxでアイコンを表示するために必要
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# Defxでアイコンを表示するために必要
[[plugins]]
repo = 'kristijanhusak/defx-icons'

# DefxでGitのステータスを表示するために必要
[[plugins]]
repo = 'kristijanhusak/defx-git'

###################################################
# vim-buffergator
###################################################
[[plugins]]
repo = 'jeetsukumaran/vim-buffergator'
hook_add = '''
  """ How To Use """
  "<Leader>b    Open buffer
  "cs           Cycle through sort regimes.
  "cd           Cycle through display regimes.
  "cp           Toggle showing full paths (only "basename" display regime)
  "cw           Cycle through window (viewport) split modes.
  "cq           Cycle through quit (autodismiss-on-select) policies.
  "r            Update (rebuild/refresh) index.
  "d            Delete the selected buffer.
  "D            Unconditionally delete the selected buffer.
  "x            Wipe the selected buffer.
  "X            Unconditionally wipe the selected buffer.
  "q            Quit the index/catalog window.
  """"""""""""""""""
  let g:buffergator_viewport_split_policy = "T"
'''

###################################################
# Git
###################################################
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  " diffを縦分割
  set diffopt+=vertical

  highlight SignColumn ctermbg = lightgrey

  " diffを縦分割
  set diffopt+=vertical

  " 表示列の背景色変更
  let gitgutter_override_sign_column_highlight = 0
  "
  " 表示するマークのカスタマイズ
  let g:gitgutter_sign_added = '✚'
  let g:gitgutter_sign_modified = '➤'
  let g:gitgutter_sign_removed = '✘'
  let g:gitgutter_sign_modified_removed = "➜"

  " 変更箇所に着色
  let g:gitgutter_highlight_lines = 1

  autocmd Vimenter,Colorscheme * :hi GitGutterAddLine ctermfg=none ctermbg=17
  autocmd Vimenter,Colorscheme * :hi GitGutterChangeLine ctermfg=none ctermbg=53
  autocmd Vimenter,Colorscheme * :hi GitGutterDeleteLine ctermfg=none ctermbg=52
  autocmd Vimenter,Colorscheme * :hi GitGutterChangeDeleteLine ctermfg=none ctermbg=53
'''

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info)
    " commitia使用時はfernが不要なので閉じる
    autocmd VimEnter * ++nested Fern . -reveal=% -drawer -toggle
    autocmd WinNew * <C-w><LEFT>  " なぜかcommitiaの右ウインドウにフォーカスが移ってしまうので、左のウインドウに移動させる

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)

    " 起動時に必要に応じてdiffを確認したいので、インサートモードでの起動はOFFにしておく
"     " 起動と同時にインサートモードにする
"     if a:info.vcs ==# 'git' && getline(1) ==# ''
"       startinsert
"     end
  endfunction
'''

###################################################
# 装飾
###################################################
[[plugins]]
repo = 'itchyny/landscape.vim'
#repo = 'junegunn/seoul256.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  set list listchars=tab:\¦\

  let g:indentLine_color_term = 111
  let g:indentLine_color_gui = '#708090'
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  " タブバーのカスタマイズを有効にする
  let g:airline#extensions#tabline#enabled = 1

  " タブバーの右領域を非表示にする
  let g:airline#extensions#tabline#show_splits = 0
  let g:airline#extensions#tabline#show_tab_type = 0
  let g:airline#extensions#tabline#show_close_button = 0

  " テーマ
  let g:airline_theme='jellybeans'
  let g:airline_powerline_fonts = 1

  " ブランチ
  let g:airline#extensions#branch#enabled = 1
  let g:airline#extensions#branch#vcs_priority = ["git", "mercurial"]

  " レイアウト
  let g:airline#extensions#default#layout = [
  \ [ 'z', 'a', 'b', 'c' ],
  \ [ 'x', 'y', 'error', 'warning']
  \ ]
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'unblevable/quick-scope'
hook_add = '''
  " Trigger a highlight in the appropriate direction when pressing these keys
  let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
'''

[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
  augroup matchup_matchparen_highlight
    autocmd!
    autocmd ColorScheme * hi MatchParen ctermbg=darkcyan guibg=darkcyan
  augroup END
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1
'''

###################################################
# エディター系
###################################################
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  " <Leader> is \

  " 行の最初の文字の前にコメント文字をトグル
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)

  " 行頭にコメントをトグル
  nmap <Leader>, <Plug>(caw:zeropos:toggle)
  vmap <Leader>, <Plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

###################################################
# 便利ツール
###################################################
[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'LeafCage/yankround.vim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'yuki-yano/fzf-preview.vim'
rev = 'release/rpc'
hook_add = '''
  nmap <Space> [fzf-p]
  xmap <Space> [fzf-p]
  " Git Status
  nnoremap <silent> [fzf-p]gs    :<C-u>FzfPreviewGitStatusRpc<CR>
  " バッファー
  nnoremap <silent> [fzf-p]b     :<C-u>FzfPreviewBuffersRpc<CR>
  nnoremap <silent> [fzf-p]B     :<C-u>FzfPreviewAllBuffersRpc<CR>
  nnoremap <silent> [fzf-p]/     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
  nnoremap <silent> [fzf-p]*     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
  nnoremap          [fzf-p]gr    :<C-u>FzfPreviewProjectGrepRpc<Space>
  xnoremap          [fzf-p]gr    "sy:FzfPreviewProjectGrepRpc<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
  nnoremap <silent> [fzf-p]l     :<C-u>FzfPreviewLocationListRpc<CR>
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
  " 【Ctrl + o】 float windowでターミナルを表示
  nnoremap <silent><C-o> :<C-u>Deol -split=floating -winheight=30 -winwidth=100<CR>
  " 【ESC】 ターミナルモードから抜ける
  tnoremap <ESC>   <C-\><C-n>
'''

###################################################
# Coc.nvim
###################################################
[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
build = 'yarn install --frozen-lockfile'
#hook_post_source = '''
#  call coc#util#install()
#'''
hook_add = '''
  " 使用するextension
  " coc-yankの代替が見つからないので、そのためだけにcoc.nvimを利用する
  let g:coc_global_extensions = [
  \  'coc-yank'
  \]

  "---------------------------------------------------
  " coc-yank
  "---------------------------------------------------
  " Show yank list by coc-yank
  nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
  " Clean yank list by coc-yank
  nnoremap <silent> <space>Y  :<C-u>CocCommand yank.clean<cr>
'''

###################################################
# 開発ツール
###################################################
## F#
#[[plugins]]
#repo = 'ionide/Ionide-vim'
#build = 'make fsautocomplete'

###################################################
# deno
###################################################
[[plugins]]
repo = 'vim-denops/denops.vim'

